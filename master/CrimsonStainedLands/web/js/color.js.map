{
  "version": 3,
  "sources": ["../../client-typescript/color.ts"],
  "sourcesContent": ["/**\r\n * ANSITextColorizer class\r\n * Converts ANSI color codes in text to HTML spans with inline styles.\r\n */\r\nexport class ANSITextColorizer {\r\n    NewForegroundColor: string = \"\";\r\n    NewBackgroundColor: string = \"\";\r\n    NewIsBold: string | number | boolean = false;\r\n    CurrentForegroundColor: string = \"\";\r\n    CurrentBackgroundColor: string = \"\";\r\n    CurrentIsBold: string | number | boolean = false;\r\n    InStyle: string | number | boolean = false;\r\n    PALETTE_VGA: { [key: number]: string } = {}\r\n    PALETTE_256: { [key: number]: string } = {}\r\n\r\n    constructor() {\r\n        // Current color and style states\r\n        this.NewForegroundColor = \"\";\r\n        this.NewBackgroundColor = \"\";\r\n        this.NewIsBold = false;\r\n        // Previous color and style states for comparison\r\n        this.CurrentForegroundColor = \"\";\r\n        this.CurrentBackgroundColor = \"\";\r\n        this.CurrentIsBold = false;\r\n        // Flag to track if we're currently within a styled span\r\n        this.InStyle = false;\r\n        // VGA color palette mapping ANSI color codes to RGB values\r\n        this.PALETTE_VGA = {\r\n            30: \"rgb(0, 0, 0)\", // Black\r\n            31: \"rgb(170, 0, 0)\", // Red\r\n            32: \"rgb(0, 170, 0)\", // Green\r\n            33: \"rgb(170, 85, 0)\", // Yellow\r\n            34: \"rgb(0, 0, 170)\", // Blue\r\n            35: \"rgb(170, 0, 170)\", // Magenta\r\n            36: \"rgb(0, 170, 170)\", // Cyan\r\n            37: \"rgb(170, 170, 170)\", // White\r\n            90: \"rgb(85, 85, 85)\", // Bright Black\r\n            91: \"rgb(255, 85, 85)\", // Bright Red\r\n            92: \"rgb(85, 255, 85)\", // Bright Green\r\n            93: \"rgb(255, 255, 85)\", // Bright Yellow\r\n            94: \"rgb(85, 85, 255)\", // Bright Blue\r\n            95: \"rgb(255, 85, 255)\", // Bright Magenta\r\n            96: \"rgb(85, 255, 255)\", // Bright Cyan\r\n            97: \"rgb(255, 255, 255)\" // Bright White\r\n        };\r\n        // Extended color palette for 256 colors\r\n        this.PALETTE_256 = [\r\n            // 16 basic colors\r\n            \"#000000\", \"#800000\", \"#008000\", \"#808000\", \"#000080\", \"#800080\", \"#008080\", \"#c0c0c0\",\r\n            \"#808080\", \"#ff0000\", \"#00ff00\", \"#ffff00\", \"#0000ff\", \"#ff00ff\", \"#00ffff\", \"#ffffff\",\r\n            // 216 RGB colors\r\n            ...Array.from({ length: 216 }, (_, i) => {\r\n                const r = Math.floor(i / 36) * 51;\r\n                const g = Math.floor((i % 36) / 6) * 51;\r\n                const b = (i % 6) * 51;\r\n                return `rgb(${r},${g},${b})`;\r\n            }),\r\n            // 24 grayscale colors\r\n            ...Array.from({ length: 24 }, (_, i) => {\r\n                const v = 8 + i * 10;\r\n                return `rgb(${v},${v},${v})`;\r\n            })\r\n        ];\r\n    }\r\n    ParseColorCode(text: string, startIndex: number) {\r\n        const escapeSequence = text.substring(startIndex);\r\n        let match;\r\n        if ((match = escapeSequence.match(/^\\[(3|4|7)z/))) {\r\n            const [fullMatch] = match;\r\n            return [startIndex + fullMatch.length, 0, false, true]; // Not bold, not base color\r\n        }\r\n        // 256 colors\r\n        if ((match = escapeSequence.match(/^\\[(38|48);5;(\\d+)m/))) {\r\n            const [fullMatch, base, colorId] = match;\r\n            var color = parseInt(colorId);\r\n            if (color > 8)\r\n                color = color - 8 + 10;\r\n            return [startIndex + fullMatch.length, color + 30, false, true]; // Not bold, not base color\r\n        }\r\n        // RGB colors\r\n        if ((match = escapeSequence.match(/^\\[(?:38|48);2;(\\d+);(\\d+);(\\d+)m/))) {\r\n            const [fullMatch, r, g, b] = match;\r\n            return [startIndex + fullMatch.length, `rgb(${r},${g},${b})`, false, false]; // Not bold, not base color\r\n        }\r\n        // Standard ANSI colors\r\n        if ((match = escapeSequence.match(/^\\[([01];)?(\\d+)m/))) {\r\n            const [fullMatch, boldIndicator, colorCode] = match;\r\n            const isBold = boldIndicator == '1;';\r\n            const code = parseInt(colorCode);\r\n            const isBaseColor = code == 0 || (code >= 30 && code <= 37) || (code >= 40 && code <= 47) ||\r\n                (code >= 90 && code <= 97) || (code >= 100 && code <= 107);\r\n            return [startIndex + fullMatch.length, code, isBold, isBaseColor];\r\n        }\r\n        // No match found\r\n        return [startIndex, -1, false, false];\r\n    }\r\n    SetColor(colorCode: string | number | boolean, isBold: string | number | boolean, isBaseColor: string | number | boolean) {\r\n        this.NewIsBold = isBold;\r\n        if (typeof colorCode === 'string') {\r\n            // RGB color\r\n            this.NewForegroundColor = colorCode;\r\n        }\r\n        else if (typeof colorCode === 'number') {\r\n\t\t\tif (!isBaseColor && colorCode >= 0 && colorCode <= 255) {\r\n                // 256 color palette\r\n                this.NewForegroundColor = this.PALETTE_256[colorCode];\r\n            }\r\n            else if (colorCode >= 30 && colorCode <= 37) {\r\n\t\t\t\tif(isBold) colorCode += 60;\r\n                // Standard foreground colors\r\n                this.NewForegroundColor = this.PALETTE_VGA[colorCode];\r\n            }\r\n            else if (isBaseColor && colorCode >= 40 && colorCode <= 47) {\r\n                // Standard background colors\r\n                this.NewForegroundColor = this.PALETTE_VGA[colorCode + 50];\r\n            }\r\n            else if (!isBaseColor && colorCode >= 40 && colorCode <= 47) {\r\n                // rgb background colors\r\n                this.NewBackgroundColor = this.PALETTE_VGA[colorCode - 10];\r\n            }\r\n            else if (colorCode >= 90 && colorCode <= 97) {\r\n                // Bright foreground colors\r\n                this.NewForegroundColor = this.PALETTE_VGA[colorCode];\r\n            }\r\n            else if (colorCode >= 100 && colorCode <= 107) {\r\n                // Bright background colors\r\n                this.NewBackgroundColor = this.PALETTE_VGA[colorCode - 10];\r\n            }\r\n            else if (colorCode === 0) {\r\n                // Reset all styles\r\n                this.NewForegroundColor = \"\";\r\n                this.NewBackgroundColor = \"\";\r\n                this.NewIsBold = false;\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * Appends new text to the existing text, adding style spans as necessary.\r\n     * @param oldText The existing styled text\r\n     * @param newText The new text to append\r\n     * @returns The combined text with appropriate styling\r\n     */\r\n    AppendText(oldText : string, newText : string) {\r\n        if (newText === \"\")\r\n            return oldText;\r\n        let spanCode = \"\";\r\n        // Check if we need to change the current style\r\n        if (this.NewBackgroundColor !== this.CurrentBackgroundColor ||\r\n            this.NewForegroundColor !== this.CurrentForegroundColor ||\r\n            this.NewIsBold !== this.CurrentIsBold) {\r\n            // Close the previous style if there was one\r\n            if (this.InStyle) {\r\n                spanCode = \"</span>\";\r\n            }\r\n            // Open a new style span if needed\r\n            if (this.NewBackgroundColor !== \"\" || this.NewForegroundColor !== \"\" || this.NewIsBold) {\r\n                spanCode += \"<span style='\";\r\n                if (this.NewBackgroundColor !== \"\") {\r\n                    spanCode += `background-color: ${this.NewBackgroundColor};`;\r\n                }\r\n                if (this.NewForegroundColor !== \"\") {\r\n                    spanCode += `color: ${this.NewForegroundColor};`;\r\n                }\r\n                if (this.NewIsBold) {\r\n                    spanCode += `font-weight: bold;`;\r\n                }\r\n                spanCode += \"'>\";\r\n                this.InStyle = true;\r\n            }\r\n            else {\r\n                this.InStyle = false;\r\n            }\r\n            // Update the current style\r\n            this.CurrentBackgroundColor = this.NewBackgroundColor;\r\n            this.CurrentForegroundColor = this.NewForegroundColor;\r\n            this.CurrentIsBold = this.NewIsBold;\r\n        }\r\n        return oldText + spanCode + newText;\r\n    }\r\n    /**\r\n     * Converts text with ANSI color codes to HTML with inline styles.\r\n     * @param text The input text with ANSI color codes\r\n     * @returns The HTML string with color and style information\r\n     */\r\n    ColorText(text: string) {\r\n        let newText = \"\";\r\n        let index = 0;\r\n        let lastIndex = 0;\r\n        while (index > -1 && index < text.length) {\r\n            // Find the next ANSI escape sequence\r\n            index = text.indexOf('\\x1b', index);\r\n            if (index > -1) {\r\n                // Append the text before the ANSI code\r\n                newText = this.AppendText(newText, text.substring(lastIndex, index));\r\n                // Parse and apply the color code\r\n                const [newIndex, colorCode, isBold, isBaseColor] = this.ParseColorCode(text, index + 1);\r\n                this.SetColor(colorCode, isBold, isBaseColor);\r\n                index = Number(newIndex);\r\n            }\r\n            else if (lastIndex < text.length) {\r\n                // Append any remaining text\r\n                newText = this.AppendText(newText, text.substring(lastIndex));\r\n            }\r\n            lastIndex = index;\r\n        }\r\n        // Close any open style span\r\n        if (this.InStyle) {\r\n            newText += '</span>';\r\n        }\r\n        return newText;\r\n    }\r\n}\r\n"],
  "mappings": "AAIO,IAAMA,EAAN,KAAwB,CAW3B,aAAc,CAVd,wBAA6B,GAC7B,wBAA6B,GAC7B,eAAuC,GACvC,4BAAiC,GACjC,4BAAiC,GACjC,mBAA2C,GAC3C,aAAqC,GACrC,iBAAyC,CAAC,EAC1C,iBAAyC,CAAC,EAItC,KAAK,mBAAqB,GAC1B,KAAK,mBAAqB,GAC1B,KAAK,UAAY,GAEjB,KAAK,uBAAyB,GAC9B,KAAK,uBAAyB,GAC9B,KAAK,cAAgB,GAErB,KAAK,QAAU,GAEf,KAAK,YAAc,CACf,GAAI,eACJ,GAAI,iBACJ,GAAI,iBACJ,GAAI,kBACJ,GAAI,iBACJ,GAAI,mBACJ,GAAI,mBACJ,GAAI,qBACJ,GAAI,kBACJ,GAAI,mBACJ,GAAI,mBACJ,GAAI,oBACJ,GAAI,mBACJ,GAAI,oBACJ,GAAI,oBACJ,GAAI,oBACR,EAEA,KAAK,YAAc,CAEf,UAAW,UAAW,UAAW,UAAW,UAAW,UAAW,UAAW,UAC7E,UAAW,UAAW,UAAW,UAAW,UAAW,UAAW,UAAW,UAE7E,GAAG,MAAM,KAAK,CAAE,OAAQ,GAAI,EAAG,CAACC,EAAGC,IAAM,CACrC,IAAMC,EAAI,KAAK,MAAMD,EAAI,EAAE,EAAI,GACzBE,EAAI,KAAK,MAAOF,EAAI,GAAM,CAAC,EAAI,GAC/BG,EAAKH,EAAI,EAAK,GACpB,MAAO,OAAOC,CAAC,IAAIC,CAAC,IAAIC,CAAC,GAC7B,CAAC,EAED,GAAG,MAAM,KAAK,CAAE,OAAQ,EAAG,EAAG,CAACJ,EAAGC,IAAM,CACpC,IAAMI,EAAI,EAAIJ,EAAI,GAClB,MAAO,OAAOI,CAAC,IAAIA,CAAC,IAAIA,CAAC,GAC7B,CAAC,CACL,CACJ,CACA,eAAeC,EAAcC,EAAoB,CAC7C,IAAMC,EAAiBF,EAAK,UAAUC,CAAU,EAC5CE,EACJ,GAAKA,EAAQD,EAAe,MAAM,aAAa,EAAI,CAC/C,GAAM,CAACE,CAAS,EAAID,EACpB,MAAO,CAACF,EAAaG,EAAU,OAAQ,EAAG,GAAO,EAAI,CACzD,CAEA,GAAKD,EAAQD,EAAe,MAAM,qBAAqB,EAAI,CACvD,GAAM,CAACE,EAAWC,EAAMC,CAAO,EAAIH,EACnC,IAAII,EAAQ,SAASD,CAAO,EAC5B,OAAIC,EAAQ,IACRA,EAAQA,EAAQ,EAAI,IACjB,CAACN,EAAaG,EAAU,OAAQG,EAAQ,GAAI,GAAO,EAAI,CAClE,CAEA,GAAKJ,EAAQD,EAAe,MAAM,mCAAmC,EAAI,CACrE,GAAM,CAACE,EAAWR,EAAGC,EAAGC,CAAC,EAAIK,EAC7B,MAAO,CAACF,EAAaG,EAAU,OAAQ,OAAOR,CAAC,IAAIC,CAAC,IAAIC,CAAC,IAAK,GAAO,EAAK,CAC9E,CAEA,GAAKK,EAAQD,EAAe,MAAM,mBAAmB,EAAI,CACrD,GAAM,CAACE,EAAWI,EAAeC,CAAS,EAAIN,EACxCO,EAASF,GAAiB,KAC1BG,EAAO,SAASF,CAAS,EACzBG,EAAcD,GAAQ,GAAMA,GAAQ,IAAMA,GAAQ,IAAQA,GAAQ,IAAMA,GAAQ,IACjFA,GAAQ,IAAMA,GAAQ,IAAQA,GAAQ,KAAOA,GAAQ,IAC1D,MAAO,CAACV,EAAaG,EAAU,OAAQO,EAAMD,EAAQE,CAAW,CACpE,CAEA,MAAO,CAACX,EAAY,GAAI,GAAO,EAAK,CACxC,CACA,SAASQ,EAAsCC,EAAmCE,EAAwC,CACtH,KAAK,UAAYF,EACb,OAAOD,GAAc,SAErB,KAAK,mBAAqBA,EAErB,OAAOA,GAAc,WAC/B,CAACG,GAAeH,GAAa,GAAKA,GAAa,IAEtC,KAAK,mBAAqB,KAAK,YAAYA,CAAS,EAE/CA,GAAa,IAAMA,GAAa,IAC9CC,IAAQD,GAAa,IAEZ,KAAK,mBAAqB,KAAK,YAAYA,CAAS,GAE/CG,GAAeH,GAAa,IAAMA,GAAa,GAEpD,KAAK,mBAAqB,KAAK,YAAYA,EAAY,EAAE,EAEpD,CAACG,GAAeH,GAAa,IAAMA,GAAa,GAErD,KAAK,mBAAqB,KAAK,YAAYA,EAAY,EAAE,EAEpDA,GAAa,IAAMA,GAAa,GAErC,KAAK,mBAAqB,KAAK,YAAYA,CAAS,EAE/CA,GAAa,KAAOA,GAAa,IAEtC,KAAK,mBAAqB,KAAK,YAAYA,EAAY,EAAE,EAEpDA,IAAc,IAEnB,KAAK,mBAAqB,GAC1B,KAAK,mBAAqB,GAC1B,KAAK,UAAY,IAG7B,CAOA,WAAWI,EAAkBC,EAAkB,CAC3C,GAAIA,IAAY,GACZ,OAAOD,EACX,IAAIE,EAAW,GAEf,OAAI,KAAK,qBAAuB,KAAK,wBACjC,KAAK,qBAAuB,KAAK,wBACjC,KAAK,YAAc,KAAK,iBAEpB,KAAK,UACLA,EAAW,WAGX,KAAK,qBAAuB,IAAM,KAAK,qBAAuB,IAAM,KAAK,WACzEA,GAAY,gBACR,KAAK,qBAAuB,KAC5BA,GAAY,qBAAqB,KAAK,kBAAkB,KAExD,KAAK,qBAAuB,KAC5BA,GAAY,UAAU,KAAK,kBAAkB,KAE7C,KAAK,YACLA,GAAY,sBAEhBA,GAAY,KACZ,KAAK,QAAU,IAGf,KAAK,QAAU,GAGnB,KAAK,uBAAyB,KAAK,mBACnC,KAAK,uBAAyB,KAAK,mBACnC,KAAK,cAAgB,KAAK,WAEvBF,EAAUE,EAAWD,CAChC,CAMA,UAAUd,EAAc,CACpB,IAAIc,EAAU,GACVE,EAAQ,EACRC,EAAY,EAChB,KAAOD,EAAQ,IAAMA,EAAQhB,EAAK,QAAQ,CAGtC,GADAgB,EAAQhB,EAAK,QAAQ,OAAQgB,CAAK,EAC9BA,EAAQ,GAAI,CAEZF,EAAU,KAAK,WAAWA,EAASd,EAAK,UAAUiB,EAAWD,CAAK,CAAC,EAEnE,GAAM,CAACE,EAAUT,EAAWC,EAAQE,CAAW,EAAI,KAAK,eAAeZ,EAAMgB,EAAQ,CAAC,EACtF,KAAK,SAASP,EAAWC,EAAQE,CAAW,EAC5CI,EAAQ,OAAOE,CAAQ,CAC3B,MACSD,EAAYjB,EAAK,SAEtBc,EAAU,KAAK,WAAWA,EAASd,EAAK,UAAUiB,CAAS,CAAC,GAEhEA,EAAYD,CAChB,CAEA,OAAI,KAAK,UACLF,GAAW,WAERA,CACX,CACJ",
  "names": ["ANSITextColorizer", "_", "i", "r", "g", "b", "v", "text", "startIndex", "escapeSequence", "match", "fullMatch", "base", "colorId", "color", "boldIndicator", "colorCode", "isBold", "code", "isBaseColor", "oldText", "newText", "spanCode", "index", "lastIndex", "newIndex"]
}
