{
  "version": 3,
  "sources": ["../../client-typescript/KeyBindingsUI.ts"],
  "sourcesContent": ["import { App } from './app';\n\nexport class KeyBindingsUI {\n    private app: App;\n    private keysList: HTMLElement | null = null;\n    private editFormContainer: HTMLElement | null = null;\n    private addKeyBtn: HTMLElement | null = null;\n    \n    constructor(app: App) {\n        this.app = app;\n        this.initializeUIElements();\n        this.initializeEventListeners();\n    }\n    \n    private initializeUIElements(): void {\n        this.keysList = document.getElementById('keys-list');\n        this.editFormContainer = document.getElementById('edit-form-container');\n        this.addKeyBtn = document.getElementById('add-key');\n    }\n    \n    private initializeEventListeners(): void {\n        if (this.addKeyBtn) {\n            this.addKeyBtn.addEventListener('click', () => {\n                this.showEditForm(null, -1);\n            });\n        }\n    }\n    \n    // Load key bindings from app settings into the UI\n    public loadKeyBindings(): void {\n        if (!this.keysList || !this.app.settings.Keybindings) {\n            return;\n        }\n        \n        // Clear existing list\n        this.keysList.innerHTML = '';\n        \n        // Clear edit form container\n        if (this.editFormContainer) {\n            this.editFormContainer.innerHTML = '';\n            this.editFormContainer.classList.remove('active');\n        }\n        \n        // Add each key binding to the list\n        this.app.settings.Keybindings.forEach((binding, index) => {\n            if(this.keysList === null)\n                return;\n            const row = document.createElement('tr');\n            row.dataset.index = index.toString();\n            \n            const keyCell = document.createElement('td');\n            keyCell.textContent = binding.key;\n            row.appendChild(keyCell);\n            \n            const commandCell = document.createElement('td');\n            commandCell.textContent = binding.commands;\n            row.appendChild(commandCell);\n            \n            const actionCell = document.createElement('td');\n            \n            // Edit button\n            const editBtn = document.createElement('button');\n            editBtn.className = 'client-button';\n            editBtn.textContent = 'Edit';\n            editBtn.style.marginRight = '5px';\n            editBtn.addEventListener('click', () => {\n                this.showEditForm(binding, index);\n            });\n            \n            // Delete button\n            const deleteBtn = document.createElement('button');\n            deleteBtn.className = 'client-button';\n            deleteBtn.textContent = 'Delete';\n            deleteBtn.addEventListener('click', () => {\n                // Remove the binding\n                this.app.settings.Keybindings.splice(index, 1);\n                \n                // Save settings and reload list\n                this.app.saveSettings();\n                this.loadKeyBindings();\n            });\n            \n            actionCell.appendChild(editBtn);\n            actionCell.appendChild(deleteBtn);\n            row.appendChild(actionCell);\n            \n            this.keysList.appendChild(row);\n        });\n    }\n    \n    // Show edit form for adding or editing a key binding\n    private showEditForm(binding: { key: string, commands: string } | null, index: number): void {\n        if (!this.editFormContainer) return;\n        \n        // Clear previous form content\n        this.editFormContainer.innerHTML = '';\n        \n        // Create the form content\n        const formTitle = document.createElement('h4');\n        formTitle.textContent = index === -1 ? 'Add New Key Binding' : 'Edit Key Binding';\n        this.editFormContainer.appendChild(formTitle);\n        \n        // Create key input row\n        const keyRow = document.createElement('div');\n        keyRow.className = 'form-row';\n        \n        const keyLabel = document.createElement('label');\n        keyLabel.textContent = 'Key:';\n        keyLabel.setAttribute('for', 'edit-key-input');\n        \n        const keyInput = document.createElement('input');\n        keyInput.type = 'text';\n        keyInput.id = 'edit-key-input';\n        keyInput.value = binding ? binding.key : '';\n        keyInput.placeholder = 'e.g., Numpad8, KeyA, ArrowUp';\n        \n        // Capture Key button\n        const captureBtn = document.createElement('button');\n        captureBtn.className = 'client-button';\n        captureBtn.textContent = 'Capture Key';\n        captureBtn.className = 'capture-key-btn';\n        captureBtn.type = 'button';\n        \n        keyRow.appendChild(keyLabel);\n        keyRow.appendChild(keyInput);\n        keyRow.appendChild(captureBtn);\n        this.editFormContainer.appendChild(keyRow);\n        \n        // Create command input row\n        const cmdRow = document.createElement('div');\n        cmdRow.className = 'form-row';\n        \n        const cmdLabel = document.createElement('label');\n        cmdLabel.textContent = 'Command:';\n        cmdLabel.setAttribute('for', 'edit-cmd-input');\n        \n        const cmdInput = document.createElement('input');\n        cmdInput.type = 'text';\n        cmdInput.id = 'edit-cmd-input';\n        cmdInput.value = binding ? binding.commands : '';\n        cmdInput.placeholder = 'e.g., north, look, /disconnect';\n        \n        cmdRow.appendChild(cmdLabel);\n        cmdRow.appendChild(cmdInput);\n        this.editFormContainer.appendChild(cmdRow);\n        \n        // Add a hint about key codes\n        const hintText = document.createElement('div');\n        hintText.innerHTML = '<small>Tip: Press \"Capture Key\" and press any key combination to automatically set the key.</small>';\n        hintText.style.marginTop = '5px';\n        hintText.style.color = '#999';\n        this.editFormContainer.appendChild(hintText);\n        \n        // Create button row\n        const buttonRow = document.createElement('div');\n        buttonRow.className = 'button-row';\n        \n        // Save button\n        const saveBtn = document.createElement('button');\n        saveBtn.className = 'client-button';\n        saveBtn.textContent = 'Save';\n        saveBtn.addEventListener('click', () => {\n            if (index === -1) {\n                // Adding new binding\n                this.app.settings.Keybindings.push({\n                    key: keyInput.value,\n                    commands: cmdInput.value\n                });\n            } else {\n                // Updating existing binding\n                if (binding) {\n                    binding.key = keyInput.value;\n                    binding.commands = cmdInput.value;\n                }\n            }\n            \n            // Save settings and reload\n            this.app.saveSettings();\n            this.loadKeyBindings();\n        });\n        \n        // Cancel button\n        const cancelBtn = document.createElement('button');\n        cancelBtn.className = 'client-button';\n        cancelBtn.textContent = 'Cancel';\n        cancelBtn.style.backgroundColor = '#555';\n        cancelBtn.addEventListener('click', () => {\n            if (this.editFormContainer) {\n                this.editFormContainer.innerHTML = '';\n                this.editFormContainer.classList.remove('active');\n            }\n        });\n        \n        buttonRow.appendChild(saveBtn);\n        buttonRow.appendChild(cancelBtn);\n        this.editFormContainer.appendChild(buttonRow);\n        \n        // Show the form container\n        this.editFormContainer.classList.add('active');\n        \n        // Add key capture functionality\n        captureBtn.addEventListener('click', () => {\n            // Create and show the key capture dialog\n            this.showKeyCaptureDialog(keyInput);\n        });\n    }\n    \n    // Function to show the key capture dialog\n    private showKeyCaptureDialog(targetInput: HTMLInputElement): void {\n        // Create overlay for the dialog\n        const dialogOverlay = document.createElement('div');\n        dialogOverlay.className = 'key-capture-overlay';\n        \n        // Create dialog container\n        const dialogContainer = document.createElement('div');\n        dialogContainer.className = 'key-capture-dialog';\n        \n        // Create dialog content\n        const dialogContent = document.createElement('div');\n        dialogContent.className = 'key-capture-content';\n        \n        // Add heading\n        const heading = document.createElement('h3');\n        heading.textContent = 'Waiting for key...';\n        \n        // Add instructions\n        const instructions = document.createElement('p');\n        instructions.textContent = 'Press any key or key combination to capture it.';\n        \n        // Add key display area\n        const keyDisplay = document.createElement('div');\n        keyDisplay.className = 'key-display';\n        keyDisplay.textContent = 'Press a key';\n        \n        // Add cancel button\n        const cancelBtn = document.createElement('button');\n        cancelBtn.className = 'client-button';\n        cancelBtn.textContent = 'Cancel';\n        cancelBtn.addEventListener('click', () => {\n            document.body.removeChild(dialogOverlay);\n            document.removeEventListener('keydown', keyHandler);\n        });\n        \n        // Assemble dialog\n        dialogContent.appendChild(heading);\n        dialogContent.appendChild(instructions);\n        dialogContent.appendChild(keyDisplay);\n        dialogContent.appendChild(cancelBtn);\n        dialogContainer.appendChild(dialogContent);\n        dialogOverlay.appendChild(dialogContainer);\n        \n        // Add to document\n        document.body.appendChild(dialogOverlay);\n        \n        // Focus the dialog to capture keypresses\n        dialogContainer.focus();\n        \n        // Key handler function\n        const keyHandler = (e: KeyboardEvent) => {\n            e.preventDefault();\n            e.stopPropagation();\n            \n            // Check if this is only a modifier key press\n            if (e.key === 'Control' || e.key === 'Alt' || e.key === 'Shift' || \n                e.key === 'Meta' || e.code === 'ControlLeft' || e.code === 'ControlRight' || \n                e.code === 'AltLeft' || e.code === 'AltRight' || \n                e.code === 'ShiftLeft' || e.code === 'ShiftRight') {\n                \n                // Update display to show we're waiting for a non-modifier key\n                keyDisplay.textContent = 'Waiting for a non-modifier key...';\n                \n                // Don't close the dialog, keep waiting for a non-modifier key\n                return;\n            }\n            \n            // Build key string with modifiers\n            let keyString = '';\n            \n            if (e.ctrlKey) {\n                keyString += 'Ctrl+';\n            }\n            \n            if (e.altKey) {\n                keyString += 'Alt+';\n            }\n            \n            if (e.shiftKey) {\n                keyString += 'Shift+';\n            }\n            \n            // Add the main key code\n            keyString += e.code;\n            \n            // Update display\n            keyDisplay.textContent = keyString;\n            \n            // Set the value in the target input\n            targetInput.value = keyString;\n            \n            // Close dialog after a short delay\n            setTimeout(() => {\n                document.body.removeChild(dialogOverlay);\n                document.removeEventListener('keydown', keyHandler);\n            }, 500);\n        };\n        \n        // Add key event listener\n        document.addEventListener('keydown', keyHandler);\n    }\n    \n    // Update UI elements\n    public updateUI(): void {\n        this.loadKeyBindings();\n    }\n}"],
  "mappings": "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",
  "names": ["KeyBindingsUI", "app", "binding", "index", "row", "keyCell", "commandCell", "actionCell", "editBtn", "deleteBtn", "formTitle", "keyRow", "keyLabel", "keyInput", "captureBtn", "cmdRow", "cmdLabel", "cmdInput", "hintText", "buttonRow", "saveBtn", "cancelBtn", "targetInput", "dialogOverlay", "dialogContainer", "dialogContent", "heading", "instructions", "keyDisplay", "keyHandler", "keyString"]
}
