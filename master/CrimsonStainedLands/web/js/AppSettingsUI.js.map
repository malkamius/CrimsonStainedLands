{
  "version": 3,
  "sources": ["../../client-typescript/AliasesUI.ts", "../../client-typescript/TriggersUI.ts", "../../client-typescript/KeyBindingsUI.ts", "../../client-typescript/VariablesUI.ts", "../../client-typescript/ProfilesUI.ts", "../../client-typescript/AppSettingsUI.ts"],
  "sourcesContent": ["import { App } from './app';\n\nexport class AliasesUI {\n    private app: App;\n    private aliasesList: HTMLElement | null = null;\n    private editFormContainer: HTMLElement | null = null;\n    private addAliasBtn: HTMLElement | null = null;\n    \n    constructor(app: App) {\n        this.app = app;\n        this.initializeUIElements();\n        this.initializeEventListeners();\n    }\n    \n    private initializeUIElements(): void {\n        this.aliasesList = document.getElementById('aliases-list');\n        this.editFormContainer = document.getElementById('alias-edit-form-container');\n        this.addAliasBtn = document.getElementById('add-alias');\n    }\n    \n    private initializeEventListeners(): void {\n        if (this.addAliasBtn) {\n            this.addAliasBtn.addEventListener('click', () => {\n                this.showEditForm(null, -1);\n            });\n        }\n    }\n    \n    // Load aliases from app settings into the UI\n    public loadAliases(): void {\n        if (!this.aliasesList || !this.app.settings.Aliases) {\n            return;\n        }\n        \n        // Clear existing list\n        this.aliasesList.innerHTML = '';\n        \n        // Clear edit form container\n        if (this.editFormContainer) {\n            this.editFormContainer.innerHTML = '';\n            this.editFormContainer.classList.remove('active');\n        }\n        \n        // Add each alias to the list\n        this.app.settings.Aliases.forEach((alias, index) => {\n            if(this.aliasesList === null)\n                return;\n            const row = document.createElement('tr');\n            row.dataset.index = index.toString();\n            \n            const aliasCell = document.createElement('td');\n            aliasCell.textContent = alias.alias;\n            row.appendChild(aliasCell);\n            \n            const commandCell = document.createElement('td');\n            commandCell.textContent = alias.command;\n            row.appendChild(commandCell);\n            \n            const actionCell = document.createElement('td');\n            \n            // Edit button\n            const editBtn = document.createElement('button');\n            editBtn.className = 'client-button';\n            editBtn.textContent = 'Edit';\n            editBtn.style.marginRight = '5px';\n            editBtn.addEventListener('click', () => {\n                this.showEditForm(alias, index);\n            });\n            \n            // Delete button\n            const deleteBtn = document.createElement('button');\n            deleteBtn.className = 'client-button';\n            deleteBtn.textContent = 'Delete';\n            deleteBtn.addEventListener('click', () => {\n                // Remove the alias\n                this.app.settings.Aliases.splice(index, 1);\n                \n                // Save settings and reload list\n                this.app.saveSettings();\n                this.loadAliases();\n            });\n            \n            actionCell.appendChild(editBtn);\n            actionCell.appendChild(deleteBtn);\n            row.appendChild(actionCell);\n            \n            this.aliasesList.appendChild(row);\n        });\n    }\n    \n    // Show edit form for adding or editing an alias\n    private showEditForm(alias: { alias: string, command: string } | null, index: number): void {\n        if (!this.editFormContainer) return;\n        \n        // Clear previous form content\n        this.editFormContainer.innerHTML = '';\n        \n        // Create the form content\n        const formTitle = document.createElement('h4');\n        formTitle.textContent = index === -1 ? 'Add New Alias' : 'Edit Alias';\n        this.editFormContainer.appendChild(formTitle);\n        \n        // Create alias input row\n        const aliasRow = document.createElement('div');\n        aliasRow.className = 'form-row';\n        \n        const aliasLabel = document.createElement('label');\n        aliasLabel.textContent = 'Alias:';\n        aliasLabel.setAttribute('for', 'edit-alias-input');\n        \n        const aliasInput = document.createElement('input');\n        aliasInput.type = 'text';\n        aliasInput.id = 'edit-alias-input';\n        aliasInput.value = alias ? alias.alias : '';\n        aliasInput.placeholder = 'e.g., n, sw, l';\n        \n        aliasRow.appendChild(aliasLabel);\n        aliasRow.appendChild(aliasInput);\n        this.editFormContainer.appendChild(aliasRow);\n        \n        // Create command input row\n        const cmdRow = document.createElement('div');\n        cmdRow.className = 'form-row';\n        \n        const cmdLabel = document.createElement('label');\n        cmdLabel.textContent = 'Command:';\n        cmdLabel.setAttribute('for', 'edit-alias-cmd-input');\n        \n        const cmdInput = document.createElement('input');\n        cmdInput.type = 'text';\n        cmdInput.id = 'edit-alias-cmd-input';\n        cmdInput.value = alias ? alias.command : '';\n        cmdInput.placeholder = 'e.g., north, southwest, look';\n        \n        cmdRow.appendChild(cmdLabel);\n        cmdRow.appendChild(cmdInput);\n        this.editFormContainer.appendChild(cmdRow);\n        \n        // Add a hint about aliases\n        const hintText = document.createElement('div');\n        hintText.innerHTML = '<small>Tip: Aliases let you type a shorter command that expands to a longer one. For example, use \"n\" for \"north\".</small>';\n        hintText.style.marginTop = '5px';\n        hintText.style.color = '#999';\n        this.editFormContainer.appendChild(hintText);\n        \n        // Create button row\n        const buttonRow = document.createElement('div');\n        buttonRow.className = 'button-row';\n        \n        // Save button\n        const saveBtn = document.createElement('button');\nsaveBtn.className = 'client-button';\n        saveBtn.textContent = 'Save';\n        saveBtn.addEventListener('click', () => {\n            if (index === -1) {\n                // Adding new alias\n                this.app.settings.Aliases.push({\n                    alias: aliasInput.value,\n                    command: cmdInput.value\n                });\n            } else {\n                // Updating existing alias\n                if (alias) {\n                    alias.alias = aliasInput.value;\n                    alias.command = cmdInput.value;\n                }\n            }\n            \n            // Save settings and reload\n            this.app.saveSettings();\n            this.loadAliases();\n        });\n        \n        // Cancel button\n        const cancelBtn = document.createElement('button');\ncancelBtn.className = 'client-button';\n        cancelBtn.textContent = 'Cancel';\n        cancelBtn.style.backgroundColor = '#555';\n        cancelBtn.addEventListener('click', () => {\n            this.editFormContainer!.innerHTML = '';\n            this.editFormContainer!.classList.remove('active');\n        });\n        \n        buttonRow.appendChild(saveBtn);\n        buttonRow.appendChild(cancelBtn);\n        this.editFormContainer.appendChild(buttonRow);\n        \n        // Show the form container\n        this.editFormContainer.classList.add('active');\n    }\n    \n    // Update UI elements\n    public updateUI(): void {\n        this.loadAliases();\n    }\n}", "import { App } from './app';\n\nexport class TriggersUI {\n    private app: App;\n    private triggersList: HTMLElement | null = null;\n    private editFormContainer: HTMLElement | null = null;\n    private addTriggerBtn: HTMLElement | null = null;\n    \n    constructor(app: App) {\n        this.app = app;\n        this.initializeUIElements();\n        this.initializeEventListeners();\n    }\n    \n    private initializeUIElements(): void {\n        this.triggersList = document.getElementById('triggers-list');\n        this.editFormContainer = document.getElementById('trigger-edit-form-container');\n        this.addTriggerBtn = document.getElementById('add-trigger');\n    }\n    \n    private initializeEventListeners(): void {\n        if (this.addTriggerBtn) {\n            this.addTriggerBtn.addEventListener('click', () => {\n                this.showEditForm(null, -1);\n            });\n        }\n    }\n    \n    // Load triggers from app settings into the UI\n    public loadTriggers(): void {\n        if (!this.triggersList || !this.app.settings.Triggers) {\n            return;\n        }\n        \n        // Clear existing list\n        this.triggersList.innerHTML = '';\n        \n        // Clear edit form container\n        if (this.editFormContainer) {\n            this.editFormContainer.innerHTML = '';\n            this.editFormContainer.classList.remove('active');\n        }\n        \n        // Add each trigger to the list\n        this.app.settings.Triggers.forEach((trigger, index) => {\n            if(this.triggersList === null)\n                return;\n            const row = document.createElement('tr');\n            row.dataset.index = index.toString();\n            \n            const patternCell = document.createElement('td');\n            patternCell.textContent = trigger.match;\n            row.appendChild(patternCell);\n            \n            const typeCell = document.createElement('td');\n            typeCell.textContent = trigger.type || 'regex';\n            row.appendChild(typeCell);\n            \n            const actionTypeCell = document.createElement('td');\n            actionTypeCell.textContent = trigger.actionType || 'text';\n            row.appendChild(actionTypeCell);\n            \n            const actionCell = document.createElement('td');\n            actionCell.textContent = trigger.actions;\n            row.appendChild(actionCell);\n            \n            const controlsCell = document.createElement('td');\n            \n            // Edit button\n            const editBtn = document.createElement('button');\n            editBtn.className = 'client-button';\n            editBtn.textContent = 'Edit';\n            editBtn.style.marginRight = '5px';\n            editBtn.addEventListener('click', () => {\n                this.showEditForm(trigger, index);\n            });\n            \n            // Delete button\n            const deleteBtn = document.createElement('button');\n            deleteBtn.className = 'client-button';\n            deleteBtn.textContent = 'Delete';\n            deleteBtn.addEventListener('click', () => {\n                // Remove the trigger\n                this.app.settings.Triggers.splice(index, 1);\n                \n                // Save settings and reload list\n                this.app.saveSettings();\n                this.loadTriggers();\n            });\n            \n            controlsCell.appendChild(editBtn);\n            controlsCell.appendChild(deleteBtn);\n            row.appendChild(controlsCell);\n            \n            this.triggersList.appendChild(row);\n        });\n    }\n    \n    // Show edit form for adding or editing a trigger\n    private showEditForm(trigger: { match: string, type: string, actions: string, actionType: string } | null, index: number): void {\n        if (!this.editFormContainer) return;\n        \n        // Clear previous form content\n        this.editFormContainer.innerHTML = '';\n        \n        // Create the form content\n        const formTitle = document.createElement('h4');\n        formTitle.textContent = index === -1 ? 'Add New Trigger' : 'Edit Trigger';\n        this.editFormContainer.appendChild(formTitle);\n        \n        // Create pattern input row\n        const patternRow = document.createElement('div');\n        patternRow.className = 'form-row';\n        \n        const patternLabel = document.createElement('label');\n        patternLabel.textContent = 'Pattern:';\n        patternLabel.setAttribute('for', 'edit-trigger-pattern');\n        \n        const patternInput = document.createElement('input');\n        patternInput.type = 'text';\n        patternInput.id = 'edit-trigger-pattern';\n        patternInput.value = trigger ? trigger.match : '';\n        patternInput.placeholder = 'e.g., ^You are hungry\\\\.$';\n        \n        patternRow.appendChild(patternLabel);\n        patternRow.appendChild(patternInput);\n        this.editFormContainer.appendChild(patternRow);\n        \n        // Create match type select row\n        const typeRow = document.createElement('div');\n        typeRow.className = 'form-row';\n        \n        const typeLabel = document.createElement('label');\n        typeLabel.textContent = 'Match Type:';\n        typeLabel.setAttribute('for', 'edit-trigger-type');\n        \n        const typeSelect = document.createElement('select');\n        typeSelect.id = 'edit-trigger-type';\n        \n        const typeOptions = ['regex', 'substring', 'exact'];\n        typeOptions.forEach(option => {\n            const optEl = document.createElement('option');\n            optEl.value = option;\n            optEl.textContent = option.charAt(0).toUpperCase() + option.slice(1);\n            if (trigger && trigger.type === option) {\n                optEl.selected = true;\n            } else if (!trigger && option === 'regex') {\n                // Default to regex for new triggers\n                optEl.selected = true;\n            }\n            typeSelect.appendChild(optEl);\n        });\n        \n        typeRow.appendChild(typeLabel);\n        typeRow.appendChild(typeSelect);\n        this.editFormContainer.appendChild(typeRow);\n        \n        // Create action type select row\n        const actionTypeRow = document.createElement('div');\n        actionTypeRow.className = 'form-row';\n        \n        const actionTypeLabel = document.createElement('label');\n        actionTypeLabel.textContent = 'Action Type:';\n        actionTypeLabel.setAttribute('for', 'edit-trigger-action-type');\n        \n        const actionTypeSelect = document.createElement('select');\n        actionTypeSelect.id = 'edit-trigger-action-type';\n        \n        const actionTypeOptions = ['text', 'javascript'];\n        actionTypeOptions.forEach(option => {\n            const optEl = document.createElement('option');\n            optEl.value = option;\n            optEl.textContent = option.charAt(0).toUpperCase() + option.slice(1);\n            if (trigger && trigger.actionType === option) {\n                optEl.selected = true;\n            } else if (!trigger && option === 'text') {\n                // Default to text for new triggers\n                optEl.selected = true;\n            }\n            actionTypeSelect.appendChild(optEl);\n        });\n        \n        actionTypeRow.appendChild(actionTypeLabel);\n        actionTypeRow.appendChild(actionTypeSelect);\n        this.editFormContainer.appendChild(actionTypeRow);\n        \n        // Create actions textarea row\n        const actionsRow = document.createElement('div');\n        actionsRow.className = 'form-row';\n        \n        const actionsLabel = document.createElement('label');\n        actionsLabel.textContent = 'Actions:';\n        actionsLabel.setAttribute('for', 'edit-trigger-actions');\n        \n        const actionsInput = document.createElement('textarea');\n        actionsInput.id = 'edit-trigger-actions';\n        actionsInput.value = trigger ? trigger.actions : '';\n        actionsInput.placeholder = 'Enter commands or JavaScript code';\n        \n        // Change the placeholder based on the selected action type\n        actionTypeSelect.addEventListener('change', () => {\n            if (actionTypeSelect.value === 'text') {\n                actionsInput.placeholder = 'Enter commands to execute when triggered';\n            } else {\n                actionsInput.placeholder = 'Enter JavaScript code to execute when triggered';\n            }\n        });\n        \n        actionsRow.appendChild(actionsLabel);\n        actionsRow.appendChild(actionsInput);\n        this.editFormContainer.appendChild(actionsRow);\n        \n        // Add a hint about triggers and action types\n        const hintText = document.createElement('div');\n        hintText.innerHTML = '<small>Tip: Triggers automatically execute actions when matching text appears in the MUD output.<br>' + \n            'Text actions are sent to the MUD as commands.<br>' +\n            'JavaScript actions are executed in the browser and can use <code>window.mudApp</code> to interact with the client.</small>';\n        hintText.style.marginTop = '5px';\n        hintText.style.color = '#999';\n        this.editFormContainer.appendChild(hintText);\n        \n        // Add pattern test section\n        const testContainer = document.createElement('div');\n        testContainer.className = 'pattern-test-container';\n        \n        const testTitle = document.createElement('h4');\n        testTitle.textContent = 'Test Pattern';\n        testContainer.appendChild(testTitle);\n        \n        const testInputRow = document.createElement('div');\n        testInputRow.className = 'form-row';\n        \n        const testInputLabel = document.createElement('label');\n        testInputLabel.textContent = 'Test Text:';\n        testInputLabel.setAttribute('for', 'pattern-test-input');\n        \n        const testInput = document.createElement('textarea');\n        testInput.id = 'pattern-test-input';\n        testInput.placeholder = 'Enter text to test against the pattern';\n        testInput.rows = 4; // Set an initial height of 4 rows\n        testInput.style.width = 'calc(100% - 110px)';\n        testInput.style.maxWidth = '400px';\n        \n        testInputRow.appendChild(testInputLabel);\n        testInputRow.appendChild(testInput);\n        testContainer.appendChild(testInputRow);\n        \n        const testButton = document.createElement('button');\n        testButton.className = 'client-button';\n        testButton.textContent = 'Test Pattern';\n        testButton.addEventListener('click', () => {\n            // Get the current pattern and type\n            const pattern = patternInput.value;\n            const type = typeSelect.value;\n            const testText = testInput.value;\n            \n            if (!pattern || !testText) {\n                return;\n            }\n            \n            let isMatch = false;\n            \n            try {\n                isMatch = this.app.matchTrigger(testText, type, pattern);\n                \n                // Get or create result element\n                let resultElement = document.getElementById('pattern-test-result');\n                if (!resultElement) {\n                    resultElement = document.createElement('div');\n                    resultElement.id = 'pattern-test-result';\n                    resultElement.className = 'pattern-test-result';\n                    testContainer.appendChild(resultElement);\n                }\n                \n                // Update result\n                if (isMatch) {\n                    resultElement.textContent = 'Match found! The trigger would activate.';\n                    resultElement.className = 'pattern-test-result success';\n                } else {\n                    resultElement.textContent = 'No match. The trigger would not activate.';\n                    resultElement.className = 'pattern-test-result failure';\n                }\n            } catch (error) {\n                // Handle regex errors\n                let resultElement = document.getElementById('pattern-test-result');\n                if (!resultElement) {\n                    resultElement = document.createElement('div');\n                    resultElement.id = 'pattern-test-result';\n                    resultElement.className = 'pattern-test-result';\n                    testContainer.appendChild(resultElement);\n                }\n                resultElement.textContent = `Error: ${error instanceof Error ? error.message : 'Unknown error'}`;\n                resultElement.className = 'pattern-test-result failure';\n            }\n        });\n        \n        testContainer.appendChild(testButton);\n        this.editFormContainer.appendChild(testContainer);\n        \n        // Create button row\n        const buttonRow = document.createElement('div');\n        buttonRow.className = 'button-row';\n        buttonRow.style.marginTop = '20px';\n        \n        // Save button\n        const saveBtn = document.createElement('button');\n        saveBtn.className = 'client-button';\n        saveBtn.textContent = 'Save';\n        saveBtn.addEventListener('click', () => {\n            if (index === -1) {\n                // Adding new trigger\n                this.app.settings.Triggers.push({\n                    match: patternInput.value,\n                    type: typeSelect.value,\n                    actions: actionsInput.value,\n                    actionType: actionTypeSelect.value\n                });\n            } else {\n                // Updating existing trigger\n                if (trigger) {\n                    trigger.match = patternInput.value;\n                    trigger.type = typeSelect.value;\n                    trigger.actions = actionsInput.value;\n                    trigger.actionType = actionTypeSelect.value;\n                }\n            }\n            \n            // Save settings and reload\n            this.app.saveSettings();\n            this.loadTriggers();\n        });\n        \n        // Cancel button\n        const cancelBtn = document.createElement('button');\n        cancelBtn.className = 'client-button';\n        cancelBtn.textContent = 'Cancel';\n        cancelBtn.style.backgroundColor = '#555';\n        cancelBtn.addEventListener('click', () => {\n            if (this.editFormContainer) {\n                this.editFormContainer.innerHTML = '';\n                this.editFormContainer.classList.remove('active');\n            }\n        });\n        \n        buttonRow.appendChild(saveBtn);\n        buttonRow.appendChild(cancelBtn);\n        this.editFormContainer.appendChild(buttonRow);\n        \n        // Show the form container\n        this.editFormContainer.classList.add('active');\n        \n        // Set initial placeholder based on current action type\n        if (trigger && trigger.actionType === 'javascript') {\n            actionsInput.placeholder = 'Enter JavaScript code to execute when triggered';\n        }\n    }\n    \n    // Update UI elements\n    public updateUI(): void {\n        this.loadTriggers();\n    }\n}", "import { App } from './app';\n\nexport class KeyBindingsUI {\n    private app: App;\n    private keysList: HTMLElement | null = null;\n    private editFormContainer: HTMLElement | null = null;\n    private addKeyBtn: HTMLElement | null = null;\n    \n    constructor(app: App) {\n        this.app = app;\n        this.initializeUIElements();\n        this.initializeEventListeners();\n    }\n    \n    private initializeUIElements(): void {\n        this.keysList = document.getElementById('keys-list');\n        this.editFormContainer = document.getElementById('edit-form-container');\n        this.addKeyBtn = document.getElementById('add-key');\n    }\n    \n    private initializeEventListeners(): void {\n        if (this.addKeyBtn) {\n            this.addKeyBtn.addEventListener('click', () => {\n                this.showEditForm(null, -1);\n            });\n        }\n    }\n    \n    // Load key bindings from app settings into the UI\n    public loadKeyBindings(): void {\n        if (!this.keysList || !this.app.settings.Keybindings) {\n            return;\n        }\n        \n        // Clear existing list\n        this.keysList.innerHTML = '';\n        \n        // Clear edit form container\n        if (this.editFormContainer) {\n            this.editFormContainer.innerHTML = '';\n            this.editFormContainer.classList.remove('active');\n        }\n        \n        // Add each key binding to the list\n        this.app.settings.Keybindings.forEach((binding, index) => {\n            if(this.keysList === null)\n                return;\n            const row = document.createElement('tr');\n            row.dataset.index = index.toString();\n            \n            const keyCell = document.createElement('td');\n            keyCell.textContent = binding.key;\n            row.appendChild(keyCell);\n            \n            const commandCell = document.createElement('td');\n            commandCell.textContent = binding.commands;\n            row.appendChild(commandCell);\n            \n            const actionCell = document.createElement('td');\n            \n            // Edit button\n            const editBtn = document.createElement('button');\n            editBtn.className = 'client-button';\n            editBtn.textContent = 'Edit';\n            editBtn.style.marginRight = '5px';\n            editBtn.addEventListener('click', () => {\n                this.showEditForm(binding, index);\n            });\n            \n            // Delete button\n            const deleteBtn = document.createElement('button');\n            deleteBtn.className = 'client-button';\n            deleteBtn.textContent = 'Delete';\n            deleteBtn.addEventListener('click', () => {\n                // Remove the binding\n                this.app.settings.Keybindings.splice(index, 1);\n                \n                // Save settings and reload list\n                this.app.saveSettings();\n                this.loadKeyBindings();\n            });\n            \n            actionCell.appendChild(editBtn);\n            actionCell.appendChild(deleteBtn);\n            row.appendChild(actionCell);\n            \n            this.keysList.appendChild(row);\n        });\n    }\n    \n    // Show edit form for adding or editing a key binding\n    private showEditForm(binding: { key: string, commands: string } | null, index: number): void {\n        if (!this.editFormContainer) return;\n        \n        // Clear previous form content\n        this.editFormContainer.innerHTML = '';\n        \n        // Create the form content\n        const formTitle = document.createElement('h4');\n        formTitle.textContent = index === -1 ? 'Add New Key Binding' : 'Edit Key Binding';\n        this.editFormContainer.appendChild(formTitle);\n        \n        // Create key input row\n        const keyRow = document.createElement('div');\n        keyRow.className = 'form-row';\n        \n        const keyLabel = document.createElement('label');\n        keyLabel.textContent = 'Key:';\n        keyLabel.setAttribute('for', 'edit-key-input');\n        \n        const keyInput = document.createElement('input');\n        keyInput.type = 'text';\n        keyInput.id = 'edit-key-input';\n        keyInput.value = binding ? binding.key : '';\n        keyInput.placeholder = 'e.g., Numpad8, KeyA, ArrowUp';\n        \n        // Capture Key button\n        const captureBtn = document.createElement('button');\n        captureBtn.className = 'client-button';\n        captureBtn.textContent = 'Capture Key';\n        captureBtn.className = 'capture-key-btn';\n        captureBtn.type = 'button';\n        \n        keyRow.appendChild(keyLabel);\n        keyRow.appendChild(keyInput);\n        keyRow.appendChild(captureBtn);\n        this.editFormContainer.appendChild(keyRow);\n        \n        // Create command input row\n        const cmdRow = document.createElement('div');\n        cmdRow.className = 'form-row';\n        \n        const cmdLabel = document.createElement('label');\n        cmdLabel.textContent = 'Command:';\n        cmdLabel.setAttribute('for', 'edit-cmd-input');\n        \n        const cmdInput = document.createElement('input');\n        cmdInput.type = 'text';\n        cmdInput.id = 'edit-cmd-input';\n        cmdInput.value = binding ? binding.commands : '';\n        cmdInput.placeholder = 'e.g., north, look, /disconnect';\n        \n        cmdRow.appendChild(cmdLabel);\n        cmdRow.appendChild(cmdInput);\n        this.editFormContainer.appendChild(cmdRow);\n        \n        // Add a hint about key codes\n        const hintText = document.createElement('div');\n        hintText.innerHTML = '<small>Tip: Press \"Capture Key\" and press any key combination to automatically set the key.</small>';\n        hintText.style.marginTop = '5px';\n        hintText.style.color = '#999';\n        this.editFormContainer.appendChild(hintText);\n        \n        // Create button row\n        const buttonRow = document.createElement('div');\n        buttonRow.className = 'button-row';\n        \n        // Save button\n        const saveBtn = document.createElement('button');\n        saveBtn.className = 'client-button';\n        saveBtn.textContent = 'Save';\n        saveBtn.addEventListener('click', () => {\n            if (index === -1) {\n                // Adding new binding\n                this.app.settings.Keybindings.push({\n                    key: keyInput.value,\n                    commands: cmdInput.value\n                });\n            } else {\n                // Updating existing binding\n                if (binding) {\n                    binding.key = keyInput.value;\n                    binding.commands = cmdInput.value;\n                }\n            }\n            \n            // Save settings and reload\n            this.app.saveSettings();\n            this.loadKeyBindings();\n        });\n        \n        // Cancel button\n        const cancelBtn = document.createElement('button');\n        cancelBtn.className = 'client-button';\n        cancelBtn.textContent = 'Cancel';\n        cancelBtn.style.backgroundColor = '#555';\n        cancelBtn.addEventListener('click', () => {\n            if (this.editFormContainer) {\n                this.editFormContainer.innerHTML = '';\n                this.editFormContainer.classList.remove('active');\n            }\n        });\n        \n        buttonRow.appendChild(saveBtn);\n        buttonRow.appendChild(cancelBtn);\n        this.editFormContainer.appendChild(buttonRow);\n        \n        // Show the form container\n        this.editFormContainer.classList.add('active');\n        \n        // Add key capture functionality\n        captureBtn.addEventListener('click', () => {\n            // Create and show the key capture dialog\n            this.showKeyCaptureDialog(keyInput);\n        });\n    }\n    \n    // Function to show the key capture dialog\n    private showKeyCaptureDialog(targetInput: HTMLInputElement): void {\n        // Create overlay for the dialog\n        const dialogOverlay = document.createElement('div');\n        dialogOverlay.className = 'key-capture-overlay';\n        \n        // Create dialog container\n        const dialogContainer = document.createElement('div');\n        dialogContainer.className = 'key-capture-dialog';\n        \n        // Create dialog content\n        const dialogContent = document.createElement('div');\n        dialogContent.className = 'key-capture-content';\n        \n        // Add heading\n        const heading = document.createElement('h3');\n        heading.textContent = 'Waiting for key...';\n        \n        // Add instructions\n        const instructions = document.createElement('p');\n        instructions.textContent = 'Press any key or key combination to capture it.';\n        \n        // Add key display area\n        const keyDisplay = document.createElement('div');\n        keyDisplay.className = 'key-display';\n        keyDisplay.textContent = 'Press a key';\n        \n        // Add cancel button\n        const cancelBtn = document.createElement('button');\n        cancelBtn.className = 'client-button';\n        cancelBtn.textContent = 'Cancel';\n        cancelBtn.addEventListener('click', () => {\n            document.body.removeChild(dialogOverlay);\n            document.removeEventListener('keydown', keyHandler);\n        });\n        \n        // Assemble dialog\n        dialogContent.appendChild(heading);\n        dialogContent.appendChild(instructions);\n        dialogContent.appendChild(keyDisplay);\n        dialogContent.appendChild(cancelBtn);\n        dialogContainer.appendChild(dialogContent);\n        dialogOverlay.appendChild(dialogContainer);\n        \n        // Add to document\n        document.body.appendChild(dialogOverlay);\n        \n        // Focus the dialog to capture keypresses\n        dialogContainer.focus();\n        \n        // Key handler function\n        const keyHandler = (e: KeyboardEvent) => {\n            e.preventDefault();\n            e.stopPropagation();\n            \n            // Check if this is only a modifier key press\n            if (e.key === 'Control' || e.key === 'Alt' || e.key === 'Shift' || \n                e.key === 'Meta' || e.code === 'ControlLeft' || e.code === 'ControlRight' || \n                e.code === 'AltLeft' || e.code === 'AltRight' || \n                e.code === 'ShiftLeft' || e.code === 'ShiftRight') {\n                \n                // Update display to show we're waiting for a non-modifier key\n                keyDisplay.textContent = 'Waiting for a non-modifier key...';\n                \n                // Don't close the dialog, keep waiting for a non-modifier key\n                return;\n            }\n            \n            // Build key string with modifiers\n            let keyString = '';\n            \n            if (e.ctrlKey) {\n                keyString += 'Ctrl+';\n            }\n            \n            if (e.altKey) {\n                keyString += 'Alt+';\n            }\n            \n            if (e.shiftKey) {\n                keyString += 'Shift+';\n            }\n            \n            // Add the main key code\n            keyString += e.code;\n            \n            // Update display\n            keyDisplay.textContent = keyString;\n            \n            // Set the value in the target input\n            targetInput.value = keyString;\n            \n            // Close dialog after a short delay\n            setTimeout(() => {\n                document.body.removeChild(dialogOverlay);\n                document.removeEventListener('keydown', keyHandler);\n            }, 500);\n        };\n        \n        // Add key event listener\n        document.addEventListener('keydown', keyHandler);\n    }\n    \n    // Update UI elements\n    public updateUI(): void {\n        this.loadKeyBindings();\n    }\n}", "import { App } from './app';\n\nexport class VariablesUI {\n    private app: App;\n    private variablesList: HTMLElement | null = null;\n    private editFormContainer: HTMLElement | null = null;\n    private addVariableBtn: HTMLElement | null = null;\n    \n    constructor(app: App) {\n        this.app = app;\n        this.initializeUIElements();\n        this.initializeEventListeners();\n    }\n    \n    private initializeUIElements(): void {\n        this.variablesList = document.getElementById('variables-list');\n        this.editFormContainer = document.getElementById('variable-edit-form-container');\n        this.addVariableBtn = document.getElementById('add-variable');\n    }\n    \n    private initializeEventListeners(): void {\n        if (this.addVariableBtn) {\n            this.addVariableBtn.addEventListener('click', () => {\n                this.showEditForm(null, -1);\n            });\n        }\n    }\n    \n    // Load variables from app settings into the UI\n    public loadVariables(): void {\n        if (!this.variablesList || !this.app.settings.Variables) {\n            return;\n        }\n        \n        // Clear existing list\n        this.variablesList.innerHTML = '';\n        \n        // Clear edit form container\n        if (this.editFormContainer) {\n            this.editFormContainer.innerHTML = '';\n            this.editFormContainer.classList.remove('active');\n        }\n        \n        // Add each variable to the list\n        this.app.settings.Variables.forEach((variable, index) => {\n            if(this.variablesList === null)\n                return;\n            const row = document.createElement('tr');\n            row.dataset.index = index.toString();\n            \n            const nameCell = document.createElement('td');\n            nameCell.textContent = variable.name;\n            row.appendChild(nameCell);\n            \n            const typeCell = document.createElement('td');\n            typeCell.textContent = variable.type || 'string';\n            row.appendChild(typeCell);\n            \n            const valueCell = document.createElement('td');\n            valueCell.textContent = variable.value;\n            row.appendChild(valueCell);\n            \n            const actionCell = document.createElement('td');\n            \n            // Edit button\n            const editBtn = document.createElement('button');\n            editBtn.className = 'client-button';\n            editBtn.textContent = 'Edit';\n            editBtn.style.marginRight = '5px';\n            editBtn.addEventListener('click', () => {\n                this.showEditForm(variable, index);\n            });\n            \n            // Delete button\n            const deleteBtn = document.createElement('button');\n            deleteBtn.className = 'client-button';\n            deleteBtn.textContent = 'Delete';\n            deleteBtn.addEventListener('click', () => {\n                // Remove the variable\n                this.app.settings.Variables.splice(index, 1);\n                \n                // Save settings and reload list\n                this.app.saveSettings();\n                this.loadVariables();\n            });\n            \n            actionCell.appendChild(editBtn);\n            actionCell.appendChild(deleteBtn);\n            row.appendChild(actionCell);\n            \n            this.variablesList.appendChild(row);\n        });\n    }\n    \n    // Show edit form for adding or editing a variable\n    private showEditForm(variable: { name: string, type: string, value: string } | null, index: number): void {\n        if (!this.editFormContainer) return;\n        \n        // Clear previous form content\n        this.editFormContainer.innerHTML = '';\n        \n        // Create the form content\n        const formTitle = document.createElement('h4');\n        formTitle.textContent = index === -1 ? 'Add New Variable' : 'Edit Variable';\n        this.editFormContainer.appendChild(formTitle);\n        \n        // Create name input row\n        const nameRow = document.createElement('div');\n        nameRow.className = 'form-row';\n        \n        const nameLabel = document.createElement('label');\n        nameLabel.textContent = 'Name:';\n        nameLabel.setAttribute('for', 'edit-variable-name');\n        \n        const nameInput = document.createElement('input');\n        nameInput.type = 'text';\n        nameInput.id = 'edit-variable-name';\n        nameInput.value = variable ? variable.name : '';\n        nameInput.placeholder = 'e.g., HP, TARGET, LOCATION';\n        \n        nameRow.appendChild(nameLabel);\n        nameRow.appendChild(nameInput);\n        this.editFormContainer.appendChild(nameRow);\n        \n        // Create type select row\n        const typeRow = document.createElement('div');\n        typeRow.className = 'form-row';\n        \n        const typeLabel = document.createElement('label');\n        typeLabel.textContent = 'Type:';\n        typeLabel.setAttribute('for', 'edit-variable-type');\n        \n        const typeSelect = document.createElement('select');\n        typeSelect.id = 'edit-variable-type';\n        \n        const typeOptions = ['string', 'number', 'boolean'];\n        typeOptions.forEach(option => {\n            const optEl = document.createElement('option');\n            optEl.value = option;\n            optEl.textContent = option.charAt(0).toUpperCase() + option.slice(1);\n            if (variable && variable.type === option) {\n                optEl.selected = true;\n            } else if (!variable && option === 'string') {\n                // Default to string for new variables\n                optEl.selected = true;\n            }\n            typeSelect.appendChild(optEl);\n        });\n        \n        typeRow.appendChild(typeLabel);\n        typeRow.appendChild(typeSelect);\n        this.editFormContainer.appendChild(typeRow);\n        \n        // Create value input row\n        const valueRow = document.createElement('div');\n        valueRow.className = 'form-row';\n        \n        const valueLabel = document.createElement('label');\n        valueLabel.textContent = 'Value:';\n        valueLabel.setAttribute('for', 'edit-variable-value');\n        \n        const valueInput = document.createElement('input');\n        valueInput.type = 'text';\n        valueInput.id = 'edit-variable-value';\n        valueInput.value = variable ? variable.value : '';\n        valueInput.placeholder = 'Enter variable value';\n        \n        valueRow.appendChild(valueLabel);\n        valueRow.appendChild(valueInput);\n        this.editFormContainer.appendChild(valueRow);\n        \n        // Add a hint about variables\n        const hintText = document.createElement('div');\n        hintText.innerHTML = '<small>Tip: Variables can be used in commands with the $VARNAME syntax. For example, \"attack $TARGET\" will be replaced with the value of the TARGET variable.</small>';\n        hintText.style.marginTop = '5px';\n        hintText.style.color = '#999';\n        this.editFormContainer.appendChild(hintText);\n        \n        // Create button row\n        const buttonRow = document.createElement('div');\n        buttonRow.className = 'button-row';\n        buttonRow.style.marginTop = '20px';\n        \n        // Save button\n        const saveBtn = document.createElement('button');\n        saveBtn.className = 'client-button';\n        saveBtn.textContent = 'Save';\n        saveBtn.addEventListener('click', () => {\n            // Validate the variable name (cannot be empty and must be alphanumeric)\n            const name = nameInput.value.trim().toUpperCase();\n            if (!name) {\n                this.app.showNotification('Variable name cannot be empty', false);\n                return;\n            }\n            \n            if (!/^[A-Z0-9_]+$/.test(name)) {\n                this.app.showNotification('Variable name can only contain letters, numbers, and underscores', false);\n                return;\n            }\n            \n            // Check for duplicate names (except when editing the same variable)\n            const duplicateIndex = this.app.settings.Variables.findIndex(v => \n                v.name.toUpperCase() === name && \n                (index === -1 || this.app.settings.Variables.indexOf(v) !== index)\n            );\n            \n            if (duplicateIndex !== -1) {\n                this.app.showNotification(`A variable with the name \"${name}\" already exists`, false);\n                return;\n            }\n            \n            // Format the value based on the type\n            let value = valueInput.value;\n            const type = typeSelect.value;\n            \n            if (type === 'number') {\n                const num = parseFloat(value);\n                if (isNaN(num)) {\n                    this.app.showNotification('Please enter a valid number', false);\n                    return;\n                }\n                value = num.toString();\n            } else if (type === 'boolean') {\n                // Convert various truthy/falsy values to boolean strings\n                value = value.toLowerCase();\n                if (['true', '1', 'yes', 'y', 'on'].includes(value)) {\n                    value = 'true';\n                } else {\n                    value = 'false';\n                }\n            }\n            \n            if (index === -1) {\n                // Adding new variable\n                this.app.settings.Variables.push({\n                    name: name,\n                    type: type,\n                    value: value\n                });\n            } else {\n                // Updating existing variable\n                if (variable) {\n                    variable.name = name;\n                    variable.type = type;\n                    variable.value = value;\n                }\n            }\n            \n            // Save settings and reload\n            this.app.saveSettings();\n            this.loadVariables();\n        });\n        \n        // Cancel button\n        const cancelBtn = document.createElement('button');\n        cancelBtn.className = 'client-button';\n        cancelBtn.textContent = 'Cancel';\n        cancelBtn.style.backgroundColor = '#555';\n        cancelBtn.addEventListener('click', () => {\n            if (this.editFormContainer) {\n                this.editFormContainer.innerHTML = '';\n                this.editFormContainer.classList.remove('active');\n            }\n        });\n        \n        buttonRow.appendChild(saveBtn);\n        buttonRow.appendChild(cancelBtn);\n        this.editFormContainer.appendChild(buttonRow);\n        \n        // Show the form container\n        this.editFormContainer.classList.add('active');\n        \n        // Add type-specific input handling\n        typeSelect.addEventListener('change', () => {\n            const selectedType = typeSelect.value;\n            \n            // Update the input type or appearance based on the selected type\n            if (selectedType === 'boolean') {\n                // For boolean, we could provide a simpler interface\n                valueInput.placeholder = 'Enter true or false';\n                \n                // If the current value isn't already boolean-like, set a default\n                const currentVal = valueInput.value.toLowerCase();\n                if (!['true', 'false', '0', '1', 'yes', 'no', 'y', 'n', 'on', 'off'].includes(currentVal)) {\n                    valueInput.value = 'false';\n                }\n            } else if (selectedType === 'number') {\n                valueInput.placeholder = 'Enter a number';\n                valueInput.type = 'number';\n                \n                // Try to convert current value to number\n                const num = parseFloat(valueInput.value);\n                if (isNaN(num)) {\n                    valueInput.value = '0';\n                }\n            } else {\n                // String type\n                valueInput.placeholder = 'Enter variable value';\n                valueInput.type = 'text';\n            }\n        });\n        \n        // Initialize the input based on current type\n        if (variable && variable.type) {\n            const event = new Event('change');\n            typeSelect.dispatchEvent(event);\n        }\n    }\n    \n    // Update UI elements\n    public updateUI(): void {\n        this.loadVariables();\n    }\n}", "import { App } from './app';\n\nexport class ProfilesUI {\n    private app: App;\n    \n    // Profile UI elements\n    private profileSelect: HTMLSelectElement | null = null;\n    private deleteProfileSelect: HTMLSelectElement | null = null;\n    private quickProfileSelect: HTMLSelectElement | null = null;\n    private newProfileNameInput: HTMLInputElement | null = null;\n    private switchProfileBtn: HTMLElement | null = null;\n    private createProfileBtn: HTMLElement | null = null;\n    private deleteProfileBtn: HTMLElement | null = null;\n    \n    // Profile confirmation modal elements\n    private profileConfirmModal: HTMLElement | null = null;\n    private profileConfirmClose: HTMLElement | null = null;\n    private confirmDeleteProfileBtn: HTMLElement | null = null;\n    private cancelDeleteProfileBtn: HTMLElement | null = null;\n    \n    private profileToDelete: string = '';\n    \n    constructor(app: App) {\n        this.app = app;\n        this.initializeUIElements();\n        this.initializeEventListeners();\n    }\n    \n    private initializeUIElements(): void {\n        // Get profile UI elements\n        this.profileSelect = document.getElementById('profile-select') as HTMLSelectElement;\n        this.deleteProfileSelect = document.getElementById('delete-profile-select') as HTMLSelectElement;\n        this.quickProfileSelect = document.getElementById('quick-profile-select') as HTMLSelectElement;\n        this.newProfileNameInput = document.getElementById('new-profile-name') as HTMLInputElement;\n        this.switchProfileBtn = document.getElementById('switch-profile');\n        this.createProfileBtn = document.getElementById('create-profile');\n        this.deleteProfileBtn = document.getElementById('delete-profile');\n        \n        // Get profile confirmation modal elements\n        this.profileConfirmModal = document.getElementById('profile-confirm-modal');\n        this.profileConfirmClose = document.getElementById('profile-confirm-close');\n        this.confirmDeleteProfileBtn = document.getElementById('confirm-delete-profile');\n        this.cancelDeleteProfileBtn = document.getElementById('cancel-delete-profile');\n    }\n    \n    private initializeEventListeners(): void {\n        // Switch profile button\n        if (this.switchProfileBtn && this.profileSelect) {\n            this.switchProfileBtn.addEventListener('click', () => {\n                const selectedProfile = this.profileSelect!.value;\n                if (selectedProfile) {\n                    if (this.app.switchProfile(selectedProfile)) {\n                        // Show notification\n                        this.app.showNotification(`Profile switched to \"${selectedProfile}\"`, true);\n                        \n                        // Refresh ALL profile UI elements\n                        this.updateUI();\n                    }\n                }\n            });\n        }\n        \n        // Create profile button\n        if (this.createProfileBtn && this.newProfileNameInput) {\n            this.createProfileBtn.addEventListener('click', () => {\n                const profileName = this.newProfileNameInput!.value.trim();\n                if (profileName) {\n                    if (this.app.createProfile(profileName)) {\n                        // Show notification\n                        this.app.showNotification(`Profile \"${profileName}\" created and activated`, true);\n                        \n                        // Clear input field\n                        this.newProfileNameInput!.value = '';\n                        \n                        // Refresh ALL profile UI elements\n                        this.updateUI();\n                    } else {\n                        this.app.showNotification(`A profile named \"${profileName}\" already exists`, false);\n                    }\n                } else {\n                    this.app.showNotification('Please enter a profile name', false);\n                }\n            });\n        }\n        \n        // Delete profile button\n        if (this.deleteProfileBtn && this.deleteProfileSelect && this.profileConfirmModal) {\n            this.deleteProfileBtn.addEventListener('click', () => {\n                if (this.deleteProfileSelect!.value) {\n                    this.profileToDelete = this.deleteProfileSelect!.value;\n                    this.profileConfirmModal!.style.display = 'block';\n                    this.app.setModalOpen(true);\n                }\n            });\n        }\n        \n        // Confirmation modal close button\n        if (this.profileConfirmClose && this.profileConfirmModal) {\n            this.profileConfirmClose.addEventListener('click', () => {\n                this.profileConfirmModal!.style.display = 'none';\n                this.profileToDelete = '';\n                this.app.setModalOpen(false);\n            });\n        }\n        \n        // Cancel delete button\n        if (this.cancelDeleteProfileBtn && this.profileConfirmModal) {\n            this.cancelDeleteProfileBtn.addEventListener('click', () => {\n                this.profileConfirmModal!.style.display = 'none';\n                this.profileToDelete = '';\n                this.app.setModalOpen(false);\n            });\n        }\n        \n        // Confirm delete button\n        if (this.confirmDeleteProfileBtn && this.profileConfirmModal) {\n            this.confirmDeleteProfileBtn.addEventListener('click', () => {\n                if (this.profileToDelete) {\n                    if (this.app.deleteProfile(this.profileToDelete)) {\n                        this.app.showNotification(`Profile \"${this.profileToDelete}\" deleted`, true);\n                    } else {\n                        this.app.showNotification(`Cannot delete the Default profile`, false);\n                    }\n                }\n                \n                // Close modal\n                this.profileConfirmModal!.style.display = 'none';\n                this.profileToDelete = '';\n                this.app.setModalOpen(false);\n\n                // Refresh UI\n                this.updateUI();\n            });\n        }\n        \n        // Click outside to close modal\n        if (this.profileConfirmModal) {\n            this.profileConfirmModal.addEventListener('click', (e) => {\n                if (e.target === this.profileConfirmModal) {\n                    if(this.profileConfirmModal === null)\n                        return;\n                    this.profileConfirmModal.style.display = 'none';\n                    this.profileToDelete = '';\n                    this.app.setModalOpen(false);\n                }\n            });\n        }\n        \n        // Quick profile selection\n        if (this.quickProfileSelect) {\n            this.quickProfileSelect.addEventListener('focus', () => {\n                this.app.setInteractingWithDropdown(true);\n            });\n            \n            this.quickProfileSelect.addEventListener('blur', () => {\n                this.app.setInteractingWithDropdown(false);\n            });\n            \n            this.quickProfileSelect.addEventListener('change', () => {\n                const selectedProfile = this.quickProfileSelect!.value;\n                if (selectedProfile) {\n                    if (this.app.switchProfile(selectedProfile)) {\n                        this.app.showNotification(`Profile switched to \"${selectedProfile}\"`, true);\n                        this.updateUI();\n                        \n                        // Focus the input field\n                        const inputField = document.getElementById('input') as HTMLInputElement;\n                        if (inputField) {\n                            inputField.select();\n                        }\n                    }\n                }\n                this.app.setInteractingWithDropdown(false);\n            });\n        }\n\n        if (this.profileSelect) {\n            this.profileSelect.addEventListener('focus', () => {\n                this.app.setInteractingWithDropdown(true);\n            });\n            \n            this.profileSelect.addEventListener('blur', () => {\n                this.app.setInteractingWithDropdown(false);\n            });\n        }\n        \n        if (this.deleteProfileSelect) {\n            this.deleteProfileSelect.addEventListener('focus', () => {\n                this.app.setInteractingWithDropdown(true);\n            });\n            \n            this.deleteProfileSelect.addEventListener('blur', () => {\n                this.app.setInteractingWithDropdown(false);\n            });\n        }\n    }\n    \n    // Update all profile dropdowns\n    public updateUI(): void {\n        this.populateProfileDropdowns();\n        this.updateQuickProfileDropdown();\n    }\n    \n    // Populate the main profile dropdowns\n    private populateProfileDropdowns(): void {\n        if (!this.profileSelect || !this.deleteProfileSelect) return;\n        \n        const profiles = this.app.getProfileNames();\n        const currentProfile = this.app.getCurrentProfileName();\n        \n        // Clear existing options\n        this.profileSelect.innerHTML = '';\n        this.deleteProfileSelect.innerHTML = '';\n        \n        // Add options to main profile select\n        profiles.forEach(profileName => {\n            if(this.profileSelect === null)\n                return;\n            const option = document.createElement('option');\n            option.value = profileName;\n            option.textContent = profileName;\n            if (profileName === currentProfile) {\n                option.selected = true;\n            }\n            this.profileSelect.appendChild(option);\n        });\n        \n        // Add options to delete profile select (excluding Default)\n        profiles.forEach(profileName => {\n            if (profileName !== 'Default') {\n                const option = document.createElement('option');\n                option.value = profileName;\n                option.textContent = profileName;\n                this.deleteProfileSelect!.appendChild(option);\n            }\n        });\n        \n        // Disable delete button if no non-default profiles exist\n        if (profiles.length <= 1 && this.deleteProfileBtn && this.deleteProfileSelect) {\n            (this.deleteProfileBtn as HTMLButtonElement).disabled = true;\n            this.deleteProfileSelect.disabled = true;\n        } else if (this.deleteProfileBtn && this.deleteProfileSelect) {\n            (this.deleteProfileBtn as HTMLButtonElement).disabled = false;\n            this.deleteProfileSelect.disabled = false;\n        }\n    }\n    \n    // Update the quick profile dropdown\n    public updateQuickProfileDropdown(): void {\n        if (!this.quickProfileSelect) return;\n        \n        // Clear existing options\n        this.quickProfileSelect.innerHTML = '';\n        \n        // Get profiles and current profile\n        const profiles = this.app.getProfileNames();\n        const currentProfile = this.app.getCurrentProfileName();\n        \n        // Add options to dropdown\n        profiles.forEach(profileName => {\n            const option = document.createElement('option');\n            option.value = profileName;\n            option.textContent = profileName;\n            if (profileName === currentProfile) {\n                option.selected = true;\n            }\n            this.quickProfileSelect!.appendChild(option);\n        });\n    }\n}", "import { App } from './app';\nimport { AliasesUI } from './AliasesUI';\nimport { TriggersUI } from './TriggersUI';\nimport { KeyBindingsUI } from './KeyBindingsUI';\nimport { VariablesUI } from './VariablesUI';\nimport { ProfilesUI } from './ProfilesUI';\n\nexport class AppSettingsUI {\n    private app: App;\n    private aliasesUI: AliasesUI;\n    private triggersUI: TriggersUI;\n    private keyBindingsUI: KeyBindingsUI;\n    private variablesUI: VariablesUI;\n    private profilesUI: ProfilesUI;\n    \n    private settingsModal: HTMLElement | null = null;\n    private modalTitle: HTMLElement | null = null;\n    private closeBtn: HTMLElement | null = null;\n    private cancelBtn: HTMLElement | null = null;\n    private saveBtn: HTMLElement | null = null;\n    \n    private menuSettings: HTMLElement | null = null;\n    private menuAliases: HTMLElement | null = null;\n    private menuTriggers: HTMLElement | null = null;\n    private menuKeys: HTMLElement | null = null;\n    private menuVariables: HTMLElement | null = null;\n    private menuHelp: HTMLElement | null = null;\n\n    private sidebarItems: NodeListOf<Element> | null = null;\n    private tabContents: NodeListOf<Element> | null = null;\n    \n    private fontSizeInput: HTMLInputElement | null = null;\n    private bgColorInput: HTMLInputElement | null = null;\n    private textColorInput: HTMLInputElement | null = null;\n    private bgColorValue: HTMLElement | null = null;\n    private textColorValue: HTMLElement | null = null;\n    private resetBtn: HTMLElement | null = null;\n    \n    \n    constructor(app: App) {\n        this.app = app;\n        \n        // Create toolbar and modals\n        this.createToolbar();\n        this.createSettingsModal();\n        this.createImportConfirmModal();\n        this.createProfileConfirmModal();\n        \n        // Initialize sub-UI managers once the DOM elements are created\n        this.aliasesUI = new AliasesUI(app);\n        this.triggersUI = new TriggersUI(app);\n        this.keyBindingsUI = new KeyBindingsUI(app);\n        this.variablesUI = new VariablesUI(app);\n        this.profilesUI = new ProfilesUI(app);\n        \n        // Initialize UI elements and event listeners\n        this.initializeUIElements();\n        this.initializeEventListeners();\n        this.initializeStyles();\n    }\n    \n    private createToolbar(): void {\n        // Create the toolbar that sits above the terminal\n        const toolbar = document.createElement('div');\n        toolbar.className = 'client-menu-bar';\n        toolbar.innerHTML = `\n            <ul style='padding-left: 0;\tlist-style-type: none;'>\n            <li class='client-menu-option'>\n            <button class=\"client-button\" id=\"connect-button\">Connect</button>\n            </li>\n            <li class='client-menu-option'>\n            <button class=\"client-button\" id=\"disconnect-button\">Disconnect</button>\n            </li>\n            <li class='client-menu-option'>\n            <button class=\"client-button\" id=\"menu-settings\">Settings</button>\n            </li>\n            <li class='client-menu-option'>\n            <button class=\"client-button\" id=\"menu-aliases\">Aliases</button>\n            </li>\n            <li class='client-menu-option'>\n            <button class=\"client-button\" id=\"menu-triggers\">Triggers</button>\n            </li>\n            <li class='client-menu-option'>\n            <button class=\"client-button\" id=\"menu-keys\">Keys</button>\n            </li>\n            <li class='client-menu-option'>\n            <button class=\"client-button\" id=\"menu-variables\">Variables</button>\n            </li>\n            <li class='client-menu-option'>\n            <button class=\"client-button\" id=\"menu-help\">Help</button>\n            </li>\n            <li class='client-menu-option'>\n            <div class=\"profile-dropdown-container\">\n                <select id=\"quick-profile-select\" class=\"profile-dropdown\">\n                    <!-- Profiles will be populated here via JavaScript -->\n                </select>\n            </div>\n            </li>\n            </ul>\n        `;\n        const resizeObserver = new ResizeObserver(entries => {\n              this.app.resize();\n        });\n          \n          // Start observing a flex container or item\n        resizeObserver.observe(toolbar);\n          \n        // Insert toolbar before the terminal element\n        if (this.app.terminalElement && this.app.terminalElement.parentNode) {\n            this.app.terminalElement.parentNode.insertBefore(toolbar, this.app.terminalElement);\n        }\n        this.app.resize();\n    }\n    \n    private createSettingsModal(): void {\n        // Create the settings modal\n        const modal = document.createElement('div');\n        modal.className = 'modal-overlay';\n        modal.id = 'settings-modal';\n        modal.innerHTML = `\n            <div class=\"modal-container\">\n                <div class=\"modal-sidebar\">\n                    <div class=\"sidebar-item active\" data-tab=\"settings\">Settings</div>\n                    <div class=\"sidebar-item\" data-tab=\"aliases\">Aliases</div>\n                    <div class=\"sidebar-item\" data-tab=\"triggers\">Triggers</div>\n                    <div class=\"sidebar-item\" data-tab=\"keys\">Keys</div>\n                    <div class=\"sidebar-item\" data-tab=\"variables\">Variables</div>\n                    <div class=\"sidebar-item\" data-tab=\"help\">Help</div>\n                </div>\n                <div class=\"modal-content\">\n                    <div class=\"modal-header\">\n                        <h2 id=\"modal-title\">Settings</h2>\n                        <span class=\"modal-close\">&times;</span>\n                    </div>\n                    \n                    <!-- Settings Tab -->\n                    <div class=\"tab-content active\" id=\"settings-tab\">\n                        <div style=\"margin-top: 20px; display: flex; gap: 10px;\">\n                            <button id=\"export-settings\">Export Settings</button>\n                            <button id=\"import-settings\">Import Settings</button>\n                        </div>\n                        <h3>Settings Profiles</h3>\n                        <div class=\"profile-container\" style=\"margin-bottom: 15px; background-color: #222; padding: 15px; border-radius: 4px; border: 1px solid #444;\">\n                            <div class=\"form-row\" style=\"margin-bottom: 15px; display: flex; align-items: center;\">\n                                <label for=\"profile-select\" style=\"min-width: 120px; color: white;\">Current Profile:</label>\n                                <select id=\"profile-select\" style=\"flex-grow: 1; padding: 8px; background-color: #333; color: white; border: 1px solid #444; border-radius: 4px; margin-right: 10px;\">\n                                    <!-- Profile options will be populated here -->\n                                </select>\n                                <button id=\"switch-profile\" style=\"background-color: #8c1f08;\">Switch</button>\n                            </div>\n                            \n                            <div class=\"form-row\" style=\"margin-bottom: 15px; display: flex; align-items: center;\">\n                                <label for=\"new-profile-name\" style=\"min-width: 120px; color: white;\">New Profile:</label>\n                                <input type=\"text\" id=\"new-profile-name\" style=\"flex-grow: 1; padding: 8px; background-color: #333; color: white; border: 1px solid #444; border-radius: 4px; margin-right: 10px;\" placeholder=\"Enter profile name\">\n                                <button id=\"create-profile\" style=\"background-color: #8c1f08;\">Create</button>\n                            </div>\n                            \n                            <div class=\"form-row\" style=\"display: flex; align-items: center;\">\n                                <label for=\"delete-profile-select\" style=\"min-width: 120px; color: white;\">Delete Profile:</label>\n                                <select id=\"delete-profile-select\" style=\"flex-grow: 1; padding: 8px; background-color: #333; color: white; border: 1px solid #444; border-radius: 4px; margin-right: 10px;\">\n                                    <!-- Profile options will be populated here, excluding Default -->\n                                </select>\n                                <button id=\"delete-profile\" style=\"background-color: #8c1f08;\">Delete</button>\n                            </div>\n                        </div>\n                        <h3>General Settings</h3>\n                        <div style=\"margin-bottom: 15px;\">\n                            <label for=\"font-size\">Font Size:</label>\n                            <input type=\"number\" id=\"font-size\" min=\"8\" max=\"24\" value=\"14\">\n                        </div>\n                        <div style=\"margin-bottom: 15px;\">\n                            <label for=\"bg-color\">Background Color:</label>\n                            <input type=\"color\" id=\"bg-color\" value=\"#000000\">\n                            <span id=\"bg-color-value\">#000000</span>\n                        </div>\n                        <div style=\"margin-bottom: 15px;\">\n                            <label for=\"text-color\">Text Color:</label>\n                            <input type=\"color\" id=\"text-color\" value=\"#FFFFFF\">\n                            <span id=\"text-color-value\">#FFFFFF</span>\n                        </div>\n                        <div style=\"margin-top: 20px;\">\n                            <button id=\"reset-settings\">Reset to Default</button>\n                        </div>\n                    </div>\n                    \n                    <!-- Aliases Tab -->\n                    <div class=\"tab-content\" id=\"aliases-tab\">\n                        <h3>Aliases</h3>\n                        <div>\n                            <div class=\"table-container\">\n                                <table style=\"width: 100%;\">\n                                    <thead>\n                                        <tr>\n                                            <th>Alias</th>\n                                            <th>Command(s)</th>\n                                            <th>Actions</th>\n                                        </tr>\n                                    </thead>\n                                    <tbody id=\"aliases-list\">\n                                        <!-- Aliases will be added here -->\n                                    </tbody>\n                                </table>\n                            </div>\n                            <div id=\"alias-edit-form-container\" class=\"edit-form-container\">\n                                <!-- Edit form will be placed here -->\n                            </div>\n                            <button id=\"add-alias\" class=\"add-btn\">Add Alias</button>\n                        </div>\n                    </div>\n                    \n                    <!-- Triggers Tab -->\n                    <div class=\"tab-content\" id=\"triggers-tab\">\n                        <h3>Triggers</h3>\n                        <div>\n                            <div class=\"table-container\">\n                                <table style=\"width: 100%;\">\n                                    <thead>\n                                        <tr>\n                                            <th>Pattern</th>\n                                            <th>Type</th>\n                                            <th>Action Type</th>\n                                            <th>Actions</th>\n                                            <th>Controls</th>\n                                        </tr>\n                                    </thead>\n                                    <tbody id=\"triggers-list\">\n                                        <!-- Triggers will be added here -->\n                                    </tbody>\n                                </table>\n                            </div>\n                            <div id=\"trigger-edit-form-container\" class=\"edit-form-container\">\n                                <!-- Edit form will be placed here -->\n                            </div>\n                            <button id=\"add-trigger\" class=\"add-btn\">Add Trigger</button>\n                        </div>\n                    </div>\n\n                    <!-- Keys Tab -->\n                    <div class=\"tab-content\" id=\"keys-tab\">\n                        <h3>Key Bindings</h3>\n                        <div>\n                            <div class=\"table-container\">\n                                <table style=\"width: 100%;\">\n                                    <thead>\n                                        <tr>\n                                            <th>Key</th>\n                                            <th>Command</th>\n                                            <th>Actions</th>\n                                        </tr>\n                                    </thead>\n                                    <tbody id=\"keys-list\">\n                                        <!-- Key bindings will be added here -->\n                                    </tbody>\n                                </table>\n                            </div>\n                            <div id=\"edit-form-container\" class=\"edit-form-container\">\n                                <!-- Edit form will be placed here -->\n                            </div>\n                            <button id=\"add-key\" class=\"add-btn\">Add Key Binding</button>\n                        </div>\n                    </div>\n\n                    <!-- Variables Tab -->\n                    <div class=\"tab-content\" id=\"variables-tab\">\n                        <h3>Variables</h3>\n                        <div>\n                            <div class=\"table-container\">\n                                <table style=\"width: 100%;\">\n                                    <thead>\n                                        <tr>\n                                            <th>Name</th>\n                                            <th>Type</th>\n                                            <th>Value</th>\n                                            <th>Actions</th>\n                                        </tr>\n                                    </thead>\n                                    <tbody id=\"variables-list\">\n                                        <!-- Variables will be added here -->\n                                    </tbody>\n                                </table>\n                            </div>\n                            <div id=\"variable-edit-form-container\" class=\"edit-form-container\">\n                                <!-- Edit form will be placed here -->\n                            </div>\n                            <button id=\"add-variable\" class=\"add-btn\">Add Variable</button>\n                        </div>\n                    </div>\n                    <!-- Help Tab -->\n<div class=\"tab-content\" id=\"help-tab\">\n    <h3>Help Documentation</h3>\n    <div class=\"help-content\">\n        <h4>Basic Commands</h4>\n        <p>Type these commands directly into the input field:</p>\n        <pre><code class=\"language-javascript\">\n// Connect to the server\n/connect\n\n// Disconnect from the server\n/disconnect\n        </code></pre>\n        \n        <h4>Using Aliases</h4>\n        <p>Aliases allow you to create shortcuts for commonly used commands:</p>\n        <pre><code class=\"language-javascript\">\n// Example aliases in the Settings > Aliases tab:\nn = north\ns = south\nl = look\n        </code></pre>\n        \n        <h4>Using Variables</h4>\n        <p>Variables can store values for use in your commands:</p>\n        <pre><code class=\"language-javascript\">\n// Set a variable (name will be stored in uppercase)\nThis is not implemented yet.\n/var hp = 100\n\n// Use a variable in a command (wrap in $)\nsay My current HP is $HP$\n        </code></pre>\n        \n        <h4>Creating Triggers</h4>\n        <p>Triggers can run commands or JavaScript when matching text appears:</p>\n        <pre><code class=\"language-javascript\">\n// JavaScript trigger example:\n// This trigger will highlight text in gray when you say something\n// Match field: ^You say '.+'$\n// Type: regex\n// Action Type: javascript\n\nconst regex = /^You say '(.+)'$/m;\nconst match = event.cleanMessage.match(regex);\n\nif (match && match[1]) {\n    // Find the start position of the quoted text\n    const startQuotePos = event.cleanMessage.indexOf(\"'\") + 1;\n    \n    // Get the length of the quoted text\n    const quotedTextLength = match[1].length;\n    \n    // Apply color to just the quoted text\n    mud.applyColor(event, \"#A0A0A0\", startQuotePos, startQuotePos + quotedTextLength);\n    \n    // Echo additional text\n    mud.echo(\\`\\n### \\${match[1]} ###\\n\\`);\n}\n        </code></pre>\n        \n        <h4>Available JavaScript APIs</h4>\n        <p>In JavaScript triggers, you have access to these objects:</p>\n        <pre><code class=\"language-javascript\">\n// The mud object provides these methods:\nmud.echo(text)             // Display text in the terminal\nmud.applyColor(event, color, startIndex, endIndex)  // Colorize text\nmud.sendCommand(command)   // Send a command to the MUD\n\n// The event object contains:\nevent.message         // The original message with ANSI codes\nevent.cleanMessage    // The message with ANSI codes stripped\nevent.startIndex      // The start index of the matched text\nevent.endIndex        // The end index of the matched text\n\n// Additional APIs:\nmud.setVariable(name, value, type)  // Set a variable\nmud.getVariable(name)              // Get a variable value\nmud.createTimer(callback, delay)    // Create a timer (ms)\nmud.createInterval(callback, interval)  // Create repeating timer\nmud.cancelTimer(id)                // Cancel a timer\nmud.cancelInterval(id)             // Cancel an interval\n        </code></pre>\n    </div>\n</div>\n                    <div class=\"modal-footer button-row\">\n                        <button id=\"save-settings\">Save</button>\n                        <button id=\"cancel-settings\">Cancel</button>\n                    </div>\n                </div>\n            </div>\n        `;\n        \n        document.body.appendChild(modal);\n    }\n    \n    private createImportConfirmModal(): void {\n        const modal = document.createElement('div');\n        modal.className = 'modal-overlay';\n        modal.id = 'import-confirm-modal';\n        modal.style.display = 'none';\n        modal.innerHTML = `\n            <div class=\"modal-container\" style=\"width: 50vw; height: auto;\">\n                <div class=\"modal-content\">\n                    <div class=\"modal-header\">\n                        <h2>Import Settings</h2>\n                        <span class=\"modal-close\" id=\"import-confirm-close\">&times;</span>\n                    </div>\n                    <div style=\"padding: 20px; color: white;\">\n                        <p>Importing settings will replace your current configuration. This includes:</p>\n                        <ul style=\"margin-left: 20px; margin-bottom: 20px;\">\n                            <li>Aliases</li>\n                            <li>Key Bindings</li>\n                            <li>Triggers</li>\n                            <li>Variables</li>\n                            <li>Visual Settings</li>\n                        </ul>\n                        <p>Are you sure you want to continue?</p>\n                    </div>\n                    <div class=\"modal-footer\">\n                        <button id=\"confirm-import\">Yes, Import</button>\n                        <button id=\"cancel-import\" style=\"background-color: #555;\">Cancel</button>\n                    </div>\n                </div>\n            </div>\n        `;\n        \n        document.body.appendChild(modal);\n        \n        // Create hidden file input for importing settings\n        const fileInput = document.createElement('input');\n        fileInput.type = 'file';\n        fileInput.id = 'settings-file-input';\n        fileInput.accept = '.json';\n        fileInput.style.display = 'none';\n        document.body.appendChild(fileInput);\n    }\n    \n    private createProfileConfirmModal(): void {\n        const modal = document.createElement('div');\n        modal.className = 'modal-overlay';\n        modal.id = 'profile-confirm-modal';\n        modal.style.display = 'none';\n        modal.innerHTML = `\n            <div class=\"modal-container\" style=\"width: 50vw; height: auto;\">\n                <div class=\"modal-content\">\n                    <div class=\"modal-header\">\n                        <h2>Delete Profile</h2>\n                        <span class=\"modal-close\" id=\"profile-confirm-close\">&times;</span>\n                    </div>\n                    <div style=\"padding: 20px; color: white;\">\n                        <p>Are you sure you want to delete this profile?</p>\n                        <p>This action cannot be undone.</p>\n                    </div>\n                    <div class=\"modal-footer\">\n                        <button id=\"confirm-delete-profile\" style=\"background-color: #dc3545;\">Delete</button>\n                        <button id=\"cancel-delete-profile\" style=\"background-color: #555;\">Cancel</button>\n                    </div>\n                </div>\n            </div>\n        `;\n        \n        document.body.appendChild(modal);\n    }\n    \n    private initializeUIElements(): void {\n        // Get modal elements\n        this.settingsModal = document.getElementById('settings-modal');\n        this.modalTitle = document.getElementById('modal-title');\n        this.closeBtn = document.querySelector('.modal-close');\n        this.cancelBtn = document.getElementById('cancel-settings');\n        this.saveBtn = document.getElementById('save-settings');\n        \n        // Get menu items\n        this.menuSettings = document.getElementById('menu-settings');\n        this.menuAliases = document.getElementById('menu-aliases');\n        this.menuTriggers = document.getElementById('menu-triggers');\n        this.menuKeys = document.getElementById('menu-keys');\n        this.menuVariables = document.getElementById('menu-variables');\n        this.menuHelp = document.getElementById('menu-help');\n        \n        // Get sidebar items and tab contents\n        this.sidebarItems = document.querySelectorAll('.sidebar-item');\n        this.tabContents = document.querySelectorAll('.tab-content');\n        \n        // Get settings form elements\n        this.fontSizeInput = document.getElementById('font-size') as HTMLInputElement;\n        this.bgColorInput = document.getElementById('bg-color') as HTMLInputElement;\n        this.textColorInput = document.getElementById('text-color') as HTMLInputElement;\n        this.bgColorValue = document.getElementById('bg-color-value');\n        this.textColorValue = document.getElementById('text-color-value');\n        this.resetBtn = document.getElementById('reset-settings');\n        \n        // Initialize form values\n        this.updateSettingsUI();\n    }\n    \n    private initializeEventListeners(): void {\n        // Modal open/close events\n        if (this.menuSettings) {\n            this.menuSettings.addEventListener('click', () => this.openModal('settings'));\n        }\n        \n        if (this.menuAliases) {\n            this.menuAliases.addEventListener('click', () => this.openModal('aliases'));\n        }\n        \n        if (this.menuTriggers) {\n            this.menuTriggers.addEventListener('click', () => this.openModal('triggers'));\n        }\n        \n        if (this.menuKeys) {\n            this.menuKeys.addEventListener('click', () => this.openModal('keys'));\n        }\n        \n        if (this.menuVariables) {\n            this.menuVariables.addEventListener('click', () => this.openModal('variables'));\n        }\n        \n        if (this.menuHelp) {\n            this.menuHelp.addEventListener('click', () => this.openModal('help'));\n        }\n\n        // Close modal events\n        if (this.closeBtn) {\n            this.closeBtn.addEventListener('click', () => this.closeModal());\n        }\n        \n        if (this.cancelBtn) {\n            this.cancelBtn.addEventListener('click', () => this.closeModal());\n        }\n        \n        if (this.settingsModal) {\n            this.settingsModal.addEventListener('click', (e) => {\n                if (e.target === this.settingsModal) {\n                    this.closeModal();\n                }\n            });\n        }\n        \n        // Sidebar tab switching\n        if (this.sidebarItems) {\n            this.sidebarItems.forEach(item => {\n                item.addEventListener('click', () => {\n                    const tabName = item.getAttribute('data-tab');\n                    if (tabName) {\n                        this.switchTab(tabName);\n                    }\n                });\n            });\n        }\n        \n        // Settings form events\n        if (this.bgColorInput && this.bgColorValue) {\n            this.bgColorInput.addEventListener('input', () => {\n                if (this.bgColorValue) {\n                    this.bgColorValue.textContent = this.bgColorInput!.value;\n                }\n            });\n        }\n        \n        if (this.textColorInput && this.textColorValue) {\n            this.textColorInput.addEventListener('input', () => {\n                if (this.textColorValue) {\n                    this.textColorValue.textContent = this.textColorInput!.value;\n                }\n            });\n        }\n        \n        // Reset button event\n        if (this.resetBtn) {\n            this.resetBtn.addEventListener('click', () => this.resetSettings());\n        }\n        \n        // Save button event\n        if (this.saveBtn) {\n            this.saveBtn.addEventListener('click', () => this.saveSettings());\n        }\n        \n        // Connect/Disconnect buttons\n        const connectBtn = document.getElementById('connect-button');\n        const disconnectBtn = document.getElementById('disconnect-button');\n        \n        if (connectBtn) {\n            connectBtn.addEventListener('click', () => {\n                this.app.sendCommand(\"/connect\");\n                this.focusInput();\n            });\n        }\n        \n        if (disconnectBtn) {\n            disconnectBtn.addEventListener('click', () => {\n                this.app.sendCommand(\"/disconnect\");\n                this.focusInput();\n            });\n        }\n        \n        // Export/Import settings\n        const exportSettingsBtn = document.getElementById('export-settings');\n        const importSettingsBtn = document.getElementById('import-settings');\n        const settingsFileInput = document.getElementById('settings-file-input') as HTMLInputElement;\n        const importConfirmModal = document.getElementById('import-confirm-modal');\n        const importConfirmClose = document.getElementById('import-confirm-close');\n        const confirmImportBtn = document.getElementById('confirm-import');\n        const cancelImportBtn = document.getElementById('cancel-import');\n        \n        if (exportSettingsBtn) {\n            exportSettingsBtn.addEventListener('click', () => this.exportSettings());\n        }\n        \n        if (importSettingsBtn && settingsFileInput) {\n            importSettingsBtn.addEventListener('click', () => {\n                settingsFileInput.click();\n            });\n            \n            settingsFileInput.addEventListener('change', (event) => {\n                if (settingsFileInput.files && settingsFileInput.files.length > 0 && importConfirmModal) {\n                    importConfirmModal.style.display = 'block';\n                    this.app.setModalOpen(true);\n                }\n            });\n        }\n        \n        if (importConfirmClose && importConfirmModal) {\n            importConfirmClose.addEventListener('click', () => {\n                importConfirmModal.style.display = 'none';\n                if (settingsFileInput) settingsFileInput.value = '';\n                this.app.setModalOpen(false);\n            });\n        }\n        \n        if (cancelImportBtn && importConfirmModal) {\n            cancelImportBtn.addEventListener('click', () => {\n                importConfirmModal.style.display = 'none';\n                if (settingsFileInput) settingsFileInput.value = '';\n                this.app.setModalOpen(false);\n            });\n        }\n        \n        if (confirmImportBtn && importConfirmModal && settingsFileInput) {\n            confirmImportBtn.addEventListener('click', () => {\n                this.importSettings(settingsFileInput.files?.[0]);\n                importConfirmModal.style.display = 'none';\n                this.app.setModalOpen(false);\n            });\n        }\n        \n        if (importConfirmModal) {\n            importConfirmModal.addEventListener('click', (e) => {\n                if (e.target === importConfirmModal) {\n                    importConfirmModal.style.display = 'none';\n                    if (settingsFileInput) settingsFileInput.value = '';\n                    this.app.setModalOpen(false);\n                }\n            });\n        }\n    }\n    \n    private initializeStyles(): void {\n        const style = document.createElement('style');\n        style.textContent = `\n            @keyframes fadeOut {\n                from { opacity: 1; }\n                to { opacity: 0; }\n            }\n            \n            .key-capture-overlay {\n                position: fixed;\n                top: 0;\n                left: 0;\n                width: 100%;\n                height: 100%;\n                background-color: rgba(0, 0, 0, 0.7);\n                display: flex;\n                justify-content: center;\n                align-items: center;\n                z-index: 2000;\n            }\n            \n            .key-capture-dialog {\n                background-color: #222;\n                border: 1px solid #444;\n                border-radius: 4px;\n                padding: 20px;\n                width: 400px;\n                max-width: 90%;\n            }\n            \n            .key-capture-content {\n                text-align: center;\n            }\n            \n            .key-display {\n                margin: 20px 0;\n                padding: 10px;\n                background-color: #333;\n                border: 1px solid #555;\n                border-radius: 4px;\n                font-family: monospace;\n                font-size: 18px;\n                color: white;\n            }\n            \n            .pattern-test-container {\n                margin-top: 20px;\n                padding: 15px;\n                background-color: #222;\n                border: 1px solid #444;\n                border-radius: 4px;\n            }\n            \n            .pattern-test-result {\n                margin-top: 10px;\n                padding: 10px;\n                border-radius: 4px;\n            }\n            \n            .pattern-test-result.success {\n                background-color: rgba(40, 167, 69, 0.3);\n                border: 1px solid #28a745;\n            }\n            \n            .pattern-test-result.failure {\n                background-color: rgba(220, 53, 69, 0.3);\n                border: 1px solid #dc3545;\n            }\n            /* Help tab styles */\n            .help-content {\n                padding: 15px;\n                overflow-y: auto;\n                max-height: 70vh;\n                color: #eee;\n                font-size: 14px;\n            }\n            \n            .help-content h4 {\n                margin-top: 25px;\n                margin-bottom: 10px;\n                border-bottom: 1px solid #444;\n                padding-bottom: 8px;\n                color: #ddd;\n            }\n            \n            .help-content p {\n                margin-bottom: 10px;\n                line-height: 1.5;\n            }\n            \n            .help-content pre {\n                background-color: #1E1E1E;\n                border: 1px solid #333;\n                border-radius: 4px;\n                padding: 15px;\n                margin: 10px 0;\n                overflow-x: auto;\n            }\n            \n            .help-content code {\n                font-family: Consolas, Monaco, 'Andale Mono', 'Ubuntu Mono', monospace;\n                font-size: 13px;\n                color: #dcdcdc;\n            }\n            \n            /* highlight.js theme overrides */\n            .hljs-comment, .hljs-quote {\n                color: #608b4e;\n                font-style: italic;\n            }\n            \n            .hljs-keyword, .hljs-selector-tag {\n                color: #569cd6;\n            }\n            \n            .hljs-string, .hljs-attribute, .hljs-addition {\n                color: #ce9178;\n            }\n            \n            .hljs-number, .hljs-literal {\n                color: #b5cea8;\n            }\n            \n            .hljs-type, .hljs-built_in {\n                color: #4ec9b0;\n            }\n        `;\n        document.head.appendChild(style);\n        // Add highlight.js stylesheet and script\n        const highlightStyle = document.createElement('link');\n        highlightStyle.rel = 'stylesheet';\n        highlightStyle.href = 'https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.7.0/styles/vs2015.min.css';\n        document.head.appendChild(highlightStyle);\n        \n        const highlightScript = document.createElement('script');\n        highlightScript.src = 'https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.7.0/highlight.min.js';\n        document.head.appendChild(highlightScript);\n        \n        // Initialize highlight.js after it loads\n        highlightScript.onload = () => {\n            // Check if hljs is available in the window object\n            if (typeof (window as any).hljs !== 'undefined') {\n                (window as any).hljs.highlightAll();\n            }\n        };\n    }\n    \n    private openModal(tabName: string): void {\n        this.app.setModalOpen(true);\n        this.loadSavedSettings();\n        \n        if (this.settingsModal) {\n            this.settingsModal.style.display = 'block';\n        }\n        \n        this.switchTab(tabName);\n        \n        // Update modal title\n        if (this.modalTitle) {\n            this.modalTitle.textContent = tabName.charAt(0).toUpperCase() + tabName.slice(1);\n        }\n    }\n    \n    private closeModal(): void {\n        if (this.settingsModal) {\n            this.settingsModal.style.display = 'none';\n        }\n        this.app.setModalOpen(false);\n        this.focusInput();\n    }\n    \n    private switchTab(tabName: string): void {\n        // Return if elements not found\n        if (!this.sidebarItems || !this.tabContents) return;\n        \n        // Handle special cases for different tabs\n        if (tabName === 'settings') {\n            this.loadSavedSettings();\n        }\n        \n        // Update active sidebar item\n        this.sidebarItems.forEach(item => {\n            item.classList.remove('active');\n            if (item.getAttribute('data-tab') === tabName) {\n                item.classList.add('active');\n            }\n        });\n        \n        // Update active content\n        this.tabContents.forEach(content => {\n            content.classList.remove('active');\n            if (content.id === `${tabName}-tab`) {\n                content.classList.add('active');\n            }\n        });\n        \n        // Update modal title\n        if (this.modalTitle) {\n            this.modalTitle.textContent = tabName.charAt(0).toUpperCase() + tabName.slice(1);\n        }\n        \n        // Load specific tab content\n        switch (tabName) {\n            case 'aliases':\n                this.aliasesUI.loadAliases();\n                break;\n            case 'triggers':\n                this.triggersUI.loadTriggers();\n                break;\n            case 'keys':\n                this.keyBindingsUI.loadKeyBindings();\n                break;\n            case 'variables':\n                this.variablesUI.loadVariables();\n                break;\n            case 'help':\n                // Apply syntax highlighting when switching to help tab\n                if (typeof (window as any).hljs !== 'undefined') {\n                    setTimeout(() => {\n                        (window as any).hljs.highlightAll();\n                    }, 0);\n                }\n                break;\n        }\n    }\n    \n    private loadSavedSettings(): void {\n        // Make sure UI elements exist\n        if (!this.fontSizeInput || !this.bgColorInput || !this.textColorInput || \n            !this.bgColorValue || !this.textColorValue) {\n            return;\n        }\n        \n        // Update form values from app settings\n        this.fontSizeInput.value = this.app.settings.fontSize.toString();\n        this.bgColorInput.value = this.app.settings.backgroundColor;\n        this.bgColorValue.textContent = this.app.settings.backgroundColor;\n        this.textColorInput.value = this.app.settings.foregroundColor;\n        this.textColorValue.textContent = this.app.settings.foregroundColor;\n        \n        // Update profiles UI\n        this.profilesUI.updateUI();\n        \n        // Update other settings tabs\n        this.aliasesUI.updateUI();\n        this.keyBindingsUI.updateUI();\n        this.triggersUI.updateUI();\n        this.variablesUI.updateUI();\n    }\n    \n    private resetSettings(): void {\n        // Reset form values to defaults\n        if (this.fontSizeInput) this.fontSizeInput.value = '14';\n        if (this.bgColorInput && this.bgColorValue) {\n            this.bgColorInput.value = '#000000';\n            this.bgColorValue.textContent = '#000000';\n        }\n        if (this.textColorInput && this.textColorValue) {\n            this.textColorInput.value = '#FFFFFF';\n            this.textColorValue.textContent = '#FFFFFF';\n        }\n    }\n    \n    private saveSettings(): void {\n        // Update app settings with form values\n        if (this.fontSizeInput) this.app.settings.fontSize = parseInt(this.fontSizeInput.value);\n        if (this.bgColorInput) this.app.settings.backgroundColor = this.bgColorInput.value;\n        if (this.textColorInput) this.app.settings.foregroundColor = this.textColorInput.value;\n        \n        // Save settings\n        this.app.saveSettings();\n        this.app.applySettings();\n        \n        // Close modal\n        this.closeModal();\n    }\n    \n    private exportSettings(): void {\n        // Get settings JSON\n        const settingsJson = this.app.exportSettings();\n        \n        // Create blob and download link\n        const blob = new Blob([settingsJson], { type: 'application/json' });\n        const url = URL.createObjectURL(blob);\n        \n        // Create filename with date\n        const date = new Date();\n        const dateStr = `${date.getFullYear()}-${String(date.getMonth() + 1).padStart(2, '0')}-${String(date.getDate()).padStart(2, '0')}`;\n        const filename = `mud-settings-${dateStr}.json`;\n        \n        // Create temporary anchor and trigger download\n        const a = document.createElement('a');\n        a.href = url;\n        a.download = filename;\n        document.body.appendChild(a);\n        a.click();\n        \n        // Clean up\n        setTimeout(() => {\n            document.body.removeChild(a);\n            URL.revokeObjectURL(url);\n        }, 100);\n    }\n    \n    private importSettings(file: File | undefined): void {\n        if (!file) {\n            this.app.showNotification('No file selected', false);\n            return;\n        }\n        \n        const reader = new FileReader();\n        reader.onload = (e) => {\n            try {\n                if (typeof e.target?.result !== 'string') {\n                    throw new Error('Invalid file format');\n                }\n                \n                const success = this.app.importSettings(e.target.result);\n                \n                if (success) {\n                    this.app.showNotification('Settings imported successfully!', true);\n                    \n                    // Update UI to reflect changes\n                    this.loadSavedSettings();\n                } else {\n                    this.app.showNotification('Error importing settings', false);\n                }\n            } catch (error) {\n                this.app.showNotification(`Error reading file: ${error}`, false);\n            }\n            \n            // Reset file input\n            const fileInput = document.getElementById('settings-file-input') as HTMLInputElement;\n            if (fileInput) fileInput.value = '';\n        };\n        \n        reader.onerror = () => {\n            this.app.showNotification('Error reading file', false);\n            \n            // Reset file input\n            const fileInput = document.getElementById('settings-file-input') as HTMLInputElement;\n            if (fileInput) fileInput.value = '';\n        };\n        \n        reader.readAsText(file);\n    }\n    \n    // Helper method to focus the input field\n    private focusInput(): void {\n        const inputField = document.getElementById('input') as HTMLInputElement;\n        if (inputField) {\n            inputField.select();\n        }\n    }\n    \n    // Public method to update all UI elements\n    public updateSettingsUI(): void {\n        // Make sure UI elements exist\n        if (!this.fontSizeInput || !this.bgColorInput || !this.textColorInput || \n            !this.bgColorValue || !this.textColorValue) {\n            return;\n        }\n        \n        // Update form values from app settings\n        this.fontSizeInput.value = this.app.settings.fontSize.toString();\n        this.bgColorInput.value = this.app.settings.backgroundColor;\n        this.bgColorValue.textContent = this.app.settings.backgroundColor;\n        this.textColorInput.value = this.app.settings.foregroundColor;\n        this.textColorValue.textContent = this.app.settings.foregroundColor;\n        \n        // Update profiles UI\n        this.profilesUI.updateUI();\n    }\n    \n    // Public method for updating all UI components\n    public updateUI(): void {\n        this.updateSettingsUI();\n        this.aliasesUI.updateUI();\n        this.triggersUI.updateUI();\n        this.keyBindingsUI.updateUI();\n        this.variablesUI.updateUI();\n        this.profilesUI.updateUI();\n    }\n}"],
  "mappings": "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",
  "names": ["AliasesUI", "app", "alias", "index", "row", "aliasCell", "commandCell", "actionCell", "editBtn", "deleteBtn", "formTitle", "aliasRow", "aliasLabel", "aliasInput", "cmdRow", "cmdLabel", "cmdInput", "hintText", "buttonRow", "saveBtn", "cancelBtn", "TriggersUI", "app", "trigger", "index", "row", "patternCell", "typeCell", "actionTypeCell", "actionCell", "controlsCell", "editBtn", "deleteBtn", "formTitle", "patternRow", "patternLabel", "patternInput", "typeRow", "typeLabel", "typeSelect", "option", "optEl", "actionTypeRow", "actionTypeLabel", "actionTypeSelect", "actionsRow", "actionsLabel", "actionsInput", "hintText", "testContainer", "testTitle", "testInputRow", "testInputLabel", "testInput", "testButton", "pattern", "type", "testText", "isMatch", "resultElement", "error", "buttonRow", "saveBtn", "cancelBtn", "KeyBindingsUI", "app", "binding", "index", "row", "keyCell", "commandCell", "actionCell", "editBtn", "deleteBtn", "formTitle", "keyRow", "keyLabel", "keyInput", "captureBtn", "cmdRow", "cmdLabel", "cmdInput", "hintText", "buttonRow", "saveBtn", "cancelBtn", "targetInput", "dialogOverlay", "dialogContainer", "dialogContent", "heading", "instructions", "keyDisplay", "keyHandler", "e", "keyString", "VariablesUI", "app", "variable", "index", "row", "nameCell", "typeCell", "valueCell", "actionCell", "editBtn", "deleteBtn", "formTitle", "nameRow", "nameLabel", "nameInput", "typeRow", "typeLabel", "typeSelect", "option", "optEl", "valueRow", "valueLabel", "valueInput", "hintText", "buttonRow", "saveBtn", "name", "v", "value", "type", "num", "cancelBtn", "selectedType", "currentVal", "event", "ProfilesUI", "app", "selectedProfile", "profileName", "inputField", "profiles", "currentProfile", "option", "AppSettingsUI", "app", "AliasesUI", "TriggersUI", "KeyBindingsUI", "VariablesUI", "ProfilesUI", "toolbar", "entries", "modal", "fileInput", "e", "item", "tabName", "connectBtn", "disconnectBtn", "exportSettingsBtn", "importSettingsBtn", "settingsFileInput", "importConfirmModal", "importConfirmClose", "confirmImportBtn", "cancelImportBtn", "event", "style", "highlightStyle", "highlightScript", "content", "settingsJson", "blob", "url", "date", "filename", "a", "file", "reader", "error", "inputField"]
}
