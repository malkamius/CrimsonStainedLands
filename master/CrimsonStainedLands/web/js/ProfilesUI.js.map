{
  "version": 3,
  "sources": ["../../client-typescript/ProfilesUI.ts"],
  "sourcesContent": ["import { App } from './app';\n\nexport class ProfilesUI {\n    private app: App;\n    \n    // Profile UI elements\n    private profileSelect: HTMLSelectElement | null = null;\n    private deleteProfileSelect: HTMLSelectElement | null = null;\n    private quickProfileSelect: HTMLSelectElement | null = null;\n    private newProfileNameInput: HTMLInputElement | null = null;\n    private switchProfileBtn: HTMLElement | null = null;\n    private createProfileBtn: HTMLElement | null = null;\n    private deleteProfileBtn: HTMLElement | null = null;\n    \n    // Profile confirmation modal elements\n    private profileConfirmModal: HTMLElement | null = null;\n    private profileConfirmClose: HTMLElement | null = null;\n    private confirmDeleteProfileBtn: HTMLElement | null = null;\n    private cancelDeleteProfileBtn: HTMLElement | null = null;\n    \n    private profileToDelete: string = '';\n    \n    constructor(app: App) {\n        this.app = app;\n        this.initializeUIElements();\n        this.initializeEventListeners();\n    }\n    \n    private initializeUIElements(): void {\n        // Get profile UI elements\n        this.profileSelect = document.getElementById('profile-select') as HTMLSelectElement;\n        this.deleteProfileSelect = document.getElementById('delete-profile-select') as HTMLSelectElement;\n        this.quickProfileSelect = document.getElementById('quick-profile-select') as HTMLSelectElement;\n        this.newProfileNameInput = document.getElementById('new-profile-name') as HTMLInputElement;\n        this.switchProfileBtn = document.getElementById('switch-profile');\n        this.createProfileBtn = document.getElementById('create-profile');\n        this.deleteProfileBtn = document.getElementById('delete-profile');\n        \n        // Get profile confirmation modal elements\n        this.profileConfirmModal = document.getElementById('profile-confirm-modal');\n        this.profileConfirmClose = document.getElementById('profile-confirm-close');\n        this.confirmDeleteProfileBtn = document.getElementById('confirm-delete-profile');\n        this.cancelDeleteProfileBtn = document.getElementById('cancel-delete-profile');\n    }\n    \n    private initializeEventListeners(): void {\n        // Switch profile button\n        if (this.switchProfileBtn && this.profileSelect) {\n            this.switchProfileBtn.addEventListener('click', () => {\n                const selectedProfile = this.profileSelect!.value;\n                if (selectedProfile) {\n                    if (this.app.switchProfile(selectedProfile)) {\n                        // Show notification\n                        this.app.showNotification(`Profile switched to \"${selectedProfile}\"`, true);\n                        \n                        // Refresh ALL profile UI elements\n                        this.updateUI();\n                    }\n                }\n            });\n        }\n        \n        // Create profile button\n        if (this.createProfileBtn && this.newProfileNameInput) {\n            this.createProfileBtn.addEventListener('click', () => {\n                const profileName = this.newProfileNameInput!.value.trim();\n                if (profileName) {\n                    if (this.app.createProfile(profileName)) {\n                        // Show notification\n                        this.app.showNotification(`Profile \"${profileName}\" created and activated`, true);\n                        \n                        // Clear input field\n                        this.newProfileNameInput!.value = '';\n                        \n                        // Refresh ALL profile UI elements\n                        this.updateUI();\n                    } else {\n                        this.app.showNotification(`A profile named \"${profileName}\" already exists`, false);\n                    }\n                } else {\n                    this.app.showNotification('Please enter a profile name', false);\n                }\n            });\n        }\n        \n        // Delete profile button\n        if (this.deleteProfileBtn && this.deleteProfileSelect && this.profileConfirmModal) {\n            this.deleteProfileBtn.addEventListener('click', () => {\n                if (this.deleteProfileSelect!.value) {\n                    this.profileToDelete = this.deleteProfileSelect!.value;\n                    this.profileConfirmModal!.style.display = 'block';\n                    this.app.setModalOpen(true);\n                }\n            });\n        }\n        \n        // Confirmation modal close button\n        if (this.profileConfirmClose && this.profileConfirmModal) {\n            this.profileConfirmClose.addEventListener('click', () => {\n                this.profileConfirmModal!.style.display = 'none';\n                this.profileToDelete = '';\n                this.app.setModalOpen(false);\n            });\n        }\n        \n        // Cancel delete button\n        if (this.cancelDeleteProfileBtn && this.profileConfirmModal) {\n            this.cancelDeleteProfileBtn.addEventListener('click', () => {\n                this.profileConfirmModal!.style.display = 'none';\n                this.profileToDelete = '';\n                this.app.setModalOpen(false);\n            });\n        }\n        \n        // Confirm delete button\n        if (this.confirmDeleteProfileBtn && this.profileConfirmModal) {\n            this.confirmDeleteProfileBtn.addEventListener('click', () => {\n                if (this.profileToDelete) {\n                    if (this.app.deleteProfile(this.profileToDelete)) {\n                        this.app.showNotification(`Profile \"${this.profileToDelete}\" deleted`, true);\n                    } else {\n                        this.app.showNotification(`Cannot delete the Default profile`, false);\n                    }\n                }\n                \n                // Close modal\n                this.profileConfirmModal!.style.display = 'none';\n                this.profileToDelete = '';\n                this.app.setModalOpen(false);\n\n                // Refresh UI\n                this.updateUI();\n            });\n        }\n        \n        // Click outside to close modal\n        if (this.profileConfirmModal) {\n            this.profileConfirmModal.addEventListener('click', (e) => {\n                if (e.target === this.profileConfirmModal) {\n                    if(this.profileConfirmModal === null)\n                        return;\n                    this.profileConfirmModal.style.display = 'none';\n                    this.profileToDelete = '';\n                    this.app.setModalOpen(false);\n                }\n            });\n        }\n        \n        // Quick profile selection\n        if (this.quickProfileSelect) {\n            this.quickProfileSelect.addEventListener('focus', () => {\n                this.app.setInteractingWithDropdown(true);\n            });\n            \n            this.quickProfileSelect.addEventListener('blur', () => {\n                this.app.setInteractingWithDropdown(false);\n            });\n            \n            this.quickProfileSelect.addEventListener('change', () => {\n                const selectedProfile = this.quickProfileSelect!.value;\n                if (selectedProfile) {\n                    if (this.app.switchProfile(selectedProfile)) {\n                        this.app.showNotification(`Profile switched to \"${selectedProfile}\"`, true);\n                        this.updateUI();\n                        \n                        // Focus the input field\n                        const inputField = document.getElementById('input') as HTMLInputElement;\n                        if (inputField) {\n                            inputField.select();\n                        }\n                    }\n                }\n                this.app.setInteractingWithDropdown(false);\n            });\n        }\n\n        if (this.profileSelect) {\n            this.profileSelect.addEventListener('focus', () => {\n                this.app.setInteractingWithDropdown(true);\n            });\n            \n            this.profileSelect.addEventListener('blur', () => {\n                this.app.setInteractingWithDropdown(false);\n            });\n        }\n        \n        if (this.deleteProfileSelect) {\n            this.deleteProfileSelect.addEventListener('focus', () => {\n                this.app.setInteractingWithDropdown(true);\n            });\n            \n            this.deleteProfileSelect.addEventListener('blur', () => {\n                this.app.setInteractingWithDropdown(false);\n            });\n        }\n    }\n    \n    // Update all profile dropdowns\n    public updateUI(): void {\n        this.populateProfileDropdowns();\n        this.updateQuickProfileDropdown();\n    }\n    \n    // Populate the main profile dropdowns\n    private populateProfileDropdowns(): void {\n        if (!this.profileSelect || !this.deleteProfileSelect) return;\n        \n        const profiles = this.app.getProfileNames();\n        const currentProfile = this.app.getCurrentProfileName();\n        \n        // Clear existing options\n        this.profileSelect.innerHTML = '';\n        this.deleteProfileSelect.innerHTML = '';\n        \n        // Add options to main profile select\n        profiles.forEach(profileName => {\n            if(this.profileSelect === null)\n                return;\n            const option = document.createElement('option');\n            option.value = profileName;\n            option.textContent = profileName;\n            if (profileName === currentProfile) {\n                option.selected = true;\n            }\n            this.profileSelect.appendChild(option);\n        });\n        \n        // Add options to delete profile select (excluding Default)\n        profiles.forEach(profileName => {\n            if (profileName !== 'Default') {\n                const option = document.createElement('option');\n                option.value = profileName;\n                option.textContent = profileName;\n                this.deleteProfileSelect!.appendChild(option);\n            }\n        });\n        \n        // Disable delete button if no non-default profiles exist\n        if (profiles.length <= 1 && this.deleteProfileBtn && this.deleteProfileSelect) {\n            (this.deleteProfileBtn as HTMLButtonElement).disabled = true;\n            this.deleteProfileSelect.disabled = true;\n        } else if (this.deleteProfileBtn && this.deleteProfileSelect) {\n            (this.deleteProfileBtn as HTMLButtonElement).disabled = false;\n            this.deleteProfileSelect.disabled = false;\n        }\n    }\n    \n    // Update the quick profile dropdown\n    public updateQuickProfileDropdown(): void {\n        if (!this.quickProfileSelect) return;\n        \n        // Clear existing options\n        this.quickProfileSelect.innerHTML = '';\n        \n        // Get profiles and current profile\n        const profiles = this.app.getProfileNames();\n        const currentProfile = this.app.getCurrentProfileName();\n        \n        // Add options to dropdown\n        profiles.forEach(profileName => {\n            const option = document.createElement('option');\n            option.value = profileName;\n            option.textContent = profileName;\n            if (profileName === currentProfile) {\n                option.selected = true;\n            }\n            this.quickProfileSelect!.appendChild(option);\n        });\n    }\n}"],
  "mappings": "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",
  "names": ["ProfilesUI", "app", "selectedProfile", "profileName", "inputField", "profiles", "currentProfile", "option"]
}
