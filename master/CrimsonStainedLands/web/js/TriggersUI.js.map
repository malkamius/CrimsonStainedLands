{
  "version": 3,
  "sources": ["../../client-typescript/TriggersUI.ts"],
  "sourcesContent": ["import { App } from './app';\n\nexport class TriggersUI {\n    private app: App;\n    private triggersList: HTMLElement | null = null;\n    private editFormContainer: HTMLElement | null = null;\n    private addTriggerBtn: HTMLElement | null = null;\n    \n    constructor(app: App) {\n        this.app = app;\n        this.initializeUIElements();\n        this.initializeEventListeners();\n    }\n    \n    private initializeUIElements(): void {\n        this.triggersList = document.getElementById('triggers-list');\n        this.editFormContainer = document.getElementById('trigger-edit-form-container');\n        this.addTriggerBtn = document.getElementById('add-trigger');\n    }\n    \n    private initializeEventListeners(): void {\n        if (this.addTriggerBtn) {\n            this.addTriggerBtn.addEventListener('click', () => {\n                this.showEditForm(null, -1);\n            });\n        }\n    }\n    \n    // Load triggers from app settings into the UI\n    public loadTriggers(): void {\n        if (!this.triggersList || !this.app.settings.Triggers) {\n            return;\n        }\n        \n        // Clear existing list\n        this.triggersList.innerHTML = '';\n        \n        // Clear edit form container\n        if (this.editFormContainer) {\n            this.editFormContainer.innerHTML = '';\n            this.editFormContainer.classList.remove('active');\n        }\n        \n        // Add each trigger to the list\n        this.app.settings.Triggers.forEach((trigger, index) => {\n            if(this.triggersList === null)\n                return;\n            const row = document.createElement('tr');\n            row.dataset.index = index.toString();\n            \n            const patternCell = document.createElement('td');\n            patternCell.textContent = trigger.match;\n            row.appendChild(patternCell);\n            \n            const typeCell = document.createElement('td');\n            typeCell.textContent = trigger.type || 'regex';\n            row.appendChild(typeCell);\n            \n            const actionTypeCell = document.createElement('td');\n            actionTypeCell.textContent = trigger.actionType || 'text';\n            row.appendChild(actionTypeCell);\n            \n            const actionCell = document.createElement('td');\n            actionCell.textContent = trigger.actions;\n            row.appendChild(actionCell);\n            \n            const controlsCell = document.createElement('td');\n            \n            // Edit button\n            const editBtn = document.createElement('button');\n            editBtn.className = 'client-button';\n            editBtn.textContent = 'Edit';\n            editBtn.style.marginRight = '5px';\n            editBtn.addEventListener('click', () => {\n                this.showEditForm(trigger, index);\n            });\n            \n            // Delete button\n            const deleteBtn = document.createElement('button');\n            deleteBtn.className = 'client-button';\n            deleteBtn.textContent = 'Delete';\n            deleteBtn.addEventListener('click', () => {\n                // Remove the trigger\n                this.app.settings.Triggers.splice(index, 1);\n                \n                // Save settings and reload list\n                this.app.saveSettings();\n                this.loadTriggers();\n            });\n            \n            controlsCell.appendChild(editBtn);\n            controlsCell.appendChild(deleteBtn);\n            row.appendChild(controlsCell);\n            \n            this.triggersList.appendChild(row);\n        });\n    }\n    \n    // Show edit form for adding or editing a trigger\n    private showEditForm(trigger: { match: string, type: string, actions: string, actionType: string } | null, index: number): void {\n        if (!this.editFormContainer) return;\n        \n        // Clear previous form content\n        this.editFormContainer.innerHTML = '';\n        \n        // Create the form content\n        const formTitle = document.createElement('h4');\n        formTitle.textContent = index === -1 ? 'Add New Trigger' : 'Edit Trigger';\n        this.editFormContainer.appendChild(formTitle);\n        \n        // Create pattern input row\n        const patternRow = document.createElement('div');\n        patternRow.className = 'form-row';\n        \n        const patternLabel = document.createElement('label');\n        patternLabel.textContent = 'Pattern:';\n        patternLabel.setAttribute('for', 'edit-trigger-pattern');\n        \n        const patternInput = document.createElement('input');\n        patternInput.type = 'text';\n        patternInput.id = 'edit-trigger-pattern';\n        patternInput.value = trigger ? trigger.match : '';\n        patternInput.placeholder = 'e.g., ^You are hungry\\\\.$';\n        \n        patternRow.appendChild(patternLabel);\n        patternRow.appendChild(patternInput);\n        this.editFormContainer.appendChild(patternRow);\n        \n        // Create match type select row\n        const typeRow = document.createElement('div');\n        typeRow.className = 'form-row';\n        \n        const typeLabel = document.createElement('label');\n        typeLabel.textContent = 'Match Type:';\n        typeLabel.setAttribute('for', 'edit-trigger-type');\n        \n        const typeSelect = document.createElement('select');\n        typeSelect.id = 'edit-trigger-type';\n        \n        const typeOptions = ['regex', 'substring', 'exact'];\n        typeOptions.forEach(option => {\n            const optEl = document.createElement('option');\n            optEl.value = option;\n            optEl.textContent = option.charAt(0).toUpperCase() + option.slice(1);\n            if (trigger && trigger.type === option) {\n                optEl.selected = true;\n            } else if (!trigger && option === 'regex') {\n                // Default to regex for new triggers\n                optEl.selected = true;\n            }\n            typeSelect.appendChild(optEl);\n        });\n        \n        typeRow.appendChild(typeLabel);\n        typeRow.appendChild(typeSelect);\n        this.editFormContainer.appendChild(typeRow);\n        \n        // Create action type select row\n        const actionTypeRow = document.createElement('div');\n        actionTypeRow.className = 'form-row';\n        \n        const actionTypeLabel = document.createElement('label');\n        actionTypeLabel.textContent = 'Action Type:';\n        actionTypeLabel.setAttribute('for', 'edit-trigger-action-type');\n        \n        const actionTypeSelect = document.createElement('select');\n        actionTypeSelect.id = 'edit-trigger-action-type';\n        \n        const actionTypeOptions = ['text', 'javascript'];\n        actionTypeOptions.forEach(option => {\n            const optEl = document.createElement('option');\n            optEl.value = option;\n            optEl.textContent = option.charAt(0).toUpperCase() + option.slice(1);\n            if (trigger && trigger.actionType === option) {\n                optEl.selected = true;\n            } else if (!trigger && option === 'text') {\n                // Default to text for new triggers\n                optEl.selected = true;\n            }\n            actionTypeSelect.appendChild(optEl);\n        });\n        \n        actionTypeRow.appendChild(actionTypeLabel);\n        actionTypeRow.appendChild(actionTypeSelect);\n        this.editFormContainer.appendChild(actionTypeRow);\n        \n        // Create actions textarea row\n        const actionsRow = document.createElement('div');\n        actionsRow.className = 'form-row';\n        \n        const actionsLabel = document.createElement('label');\n        actionsLabel.textContent = 'Actions:';\n        actionsLabel.setAttribute('for', 'edit-trigger-actions');\n        \n        const actionsInput = document.createElement('textarea');\n        actionsInput.id = 'edit-trigger-actions';\n        actionsInput.value = trigger ? trigger.actions : '';\n        actionsInput.placeholder = 'Enter commands or JavaScript code';\n        \n        // Change the placeholder based on the selected action type\n        actionTypeSelect.addEventListener('change', () => {\n            if (actionTypeSelect.value === 'text') {\n                actionsInput.placeholder = 'Enter commands to execute when triggered';\n            } else {\n                actionsInput.placeholder = 'Enter JavaScript code to execute when triggered';\n            }\n        });\n        \n        actionsRow.appendChild(actionsLabel);\n        actionsRow.appendChild(actionsInput);\n        this.editFormContainer.appendChild(actionsRow);\n        \n        // Add a hint about triggers and action types\n        const hintText = document.createElement('div');\n        hintText.innerHTML = '<small>Tip: Triggers automatically execute actions when matching text appears in the MUD output.<br>' + \n            'Text actions are sent to the MUD as commands.<br>' +\n            'JavaScript actions are executed in the browser and can use <code>window.mudApp</code> to interact with the client.</small>';\n        hintText.style.marginTop = '5px';\n        hintText.style.color = '#999';\n        this.editFormContainer.appendChild(hintText);\n        \n        // Add pattern test section\n        const testContainer = document.createElement('div');\n        testContainer.className = 'pattern-test-container';\n        \n        const testTitle = document.createElement('h4');\n        testTitle.textContent = 'Test Pattern';\n        testContainer.appendChild(testTitle);\n        \n        const testInputRow = document.createElement('div');\n        testInputRow.className = 'form-row';\n        \n        const testInputLabel = document.createElement('label');\n        testInputLabel.textContent = 'Test Text:';\n        testInputLabel.setAttribute('for', 'pattern-test-input');\n        \n        const testInput = document.createElement('textarea');\n        testInput.id = 'pattern-test-input';\n        testInput.placeholder = 'Enter text to test against the pattern';\n        testInput.rows = 4; // Set an initial height of 4 rows\n        testInput.style.width = 'calc(100% - 110px)';\n        testInput.style.maxWidth = '400px';\n        \n        testInputRow.appendChild(testInputLabel);\n        testInputRow.appendChild(testInput);\n        testContainer.appendChild(testInputRow);\n        \n        const testButton = document.createElement('button');\n        testButton.className = 'client-button';\n        testButton.textContent = 'Test Pattern';\n        testButton.addEventListener('click', () => {\n            // Get the current pattern and type\n            const pattern = patternInput.value;\n            const type = typeSelect.value;\n            const testText = testInput.value;\n            \n            if (!pattern || !testText) {\n                return;\n            }\n            \n            let isMatch = false;\n            \n            try {\n                isMatch = this.app.matchTrigger(testText, type, pattern);\n                \n                // Get or create result element\n                let resultElement = document.getElementById('pattern-test-result');\n                if (!resultElement) {\n                    resultElement = document.createElement('div');\n                    resultElement.id = 'pattern-test-result';\n                    resultElement.className = 'pattern-test-result';\n                    testContainer.appendChild(resultElement);\n                }\n                \n                // Update result\n                if (isMatch) {\n                    resultElement.textContent = 'Match found! The trigger would activate.';\n                    resultElement.className = 'pattern-test-result success';\n                } else {\n                    resultElement.textContent = 'No match. The trigger would not activate.';\n                    resultElement.className = 'pattern-test-result failure';\n                }\n            } catch (error) {\n                // Handle regex errors\n                let resultElement = document.getElementById('pattern-test-result');\n                if (!resultElement) {\n                    resultElement = document.createElement('div');\n                    resultElement.id = 'pattern-test-result';\n                    resultElement.className = 'pattern-test-result';\n                    testContainer.appendChild(resultElement);\n                }\n                resultElement.textContent = `Error: ${error instanceof Error ? error.message : 'Unknown error'}`;\n                resultElement.className = 'pattern-test-result failure';\n            }\n        });\n        \n        testContainer.appendChild(testButton);\n        this.editFormContainer.appendChild(testContainer);\n        \n        // Create button row\n        const buttonRow = document.createElement('div');\n        buttonRow.className = 'button-row';\n        buttonRow.style.marginTop = '20px';\n        \n        // Save button\n        const saveBtn = document.createElement('button');\n        saveBtn.className = 'client-button';\n        saveBtn.textContent = 'Save';\n        saveBtn.addEventListener('click', () => {\n            if (index === -1) {\n                // Adding new trigger\n                this.app.settings.Triggers.push({\n                    match: patternInput.value,\n                    type: typeSelect.value,\n                    actions: actionsInput.value,\n                    actionType: actionTypeSelect.value\n                });\n            } else {\n                // Updating existing trigger\n                if (trigger) {\n                    trigger.match = patternInput.value;\n                    trigger.type = typeSelect.value;\n                    trigger.actions = actionsInput.value;\n                    trigger.actionType = actionTypeSelect.value;\n                }\n            }\n            \n            // Save settings and reload\n            this.app.saveSettings();\n            this.loadTriggers();\n        });\n        \n        // Cancel button\n        const cancelBtn = document.createElement('button');\n        cancelBtn.className = 'client-button';\n        cancelBtn.textContent = 'Cancel';\n        cancelBtn.style.backgroundColor = '#555';\n        cancelBtn.addEventListener('click', () => {\n            if (this.editFormContainer) {\n                this.editFormContainer.innerHTML = '';\n                this.editFormContainer.classList.remove('active');\n            }\n        });\n        \n        buttonRow.appendChild(saveBtn);\n        buttonRow.appendChild(cancelBtn);\n        this.editFormContainer.appendChild(buttonRow);\n        \n        // Show the form container\n        this.editFormContainer.classList.add('active');\n        \n        // Set initial placeholder based on current action type\n        if (trigger && trigger.actionType === 'javascript') {\n            actionsInput.placeholder = 'Enter JavaScript code to execute when triggered';\n        }\n    }\n    \n    // Update UI elements\n    public updateUI(): void {\n        this.loadTriggers();\n    }\n}"],
  "mappings": "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",
  "names": ["TriggersUI", "app", "trigger", "index", "row", "patternCell", "typeCell", "actionTypeCell", "actionCell", "controlsCell", "editBtn", "deleteBtn", "formTitle", "patternRow", "patternLabel", "patternInput", "typeRow", "typeLabel", "typeSelect", "option", "optEl", "actionTypeRow", "actionTypeLabel", "actionTypeSelect", "actionsRow", "actionsLabel", "actionsInput", "hintText", "testContainer", "testTitle", "testInputRow", "testInputLabel", "testInput", "testButton", "pattern", "type", "testText", "isMatch", "resultElement", "error", "buttonRow", "saveBtn", "cancelBtn"]
}
