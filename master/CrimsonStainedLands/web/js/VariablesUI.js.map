{
  "version": 3,
  "sources": ["../../client-typescript/VariablesUI.ts"],
  "sourcesContent": ["import { App } from './app';\n\nexport class VariablesUI {\n    private app: App;\n    private variablesList: HTMLElement | null = null;\n    private editFormContainer: HTMLElement | null = null;\n    private addVariableBtn: HTMLElement | null = null;\n    \n    constructor(app: App) {\n        this.app = app;\n        this.initializeUIElements();\n        this.initializeEventListeners();\n    }\n    \n    private initializeUIElements(): void {\n        this.variablesList = document.getElementById('variables-list');\n        this.editFormContainer = document.getElementById('variable-edit-form-container');\n        this.addVariableBtn = document.getElementById('add-variable');\n    }\n    \n    private initializeEventListeners(): void {\n        if (this.addVariableBtn) {\n            this.addVariableBtn.addEventListener('click', () => {\n                this.showEditForm(null, -1);\n            });\n        }\n    }\n    \n    // Load variables from app settings into the UI\n    public loadVariables(): void {\n        if (!this.variablesList || !this.app.settings.Variables) {\n            return;\n        }\n        \n        // Clear existing list\n        this.variablesList.innerHTML = '';\n        \n        // Clear edit form container\n        if (this.editFormContainer) {\n            this.editFormContainer.innerHTML = '';\n            this.editFormContainer.classList.remove('active');\n        }\n        \n        // Add each variable to the list\n        this.app.settings.Variables.forEach((variable, index) => {\n            if(this.variablesList === null)\n                return;\n            const row = document.createElement('tr');\n            row.dataset.index = index.toString();\n            \n            const nameCell = document.createElement('td');\n            nameCell.textContent = variable.name;\n            row.appendChild(nameCell);\n            \n            const typeCell = document.createElement('td');\n            typeCell.textContent = variable.type || 'string';\n            row.appendChild(typeCell);\n            \n            const valueCell = document.createElement('td');\n            valueCell.textContent = variable.value;\n            row.appendChild(valueCell);\n            \n            const actionCell = document.createElement('td');\n            \n            // Edit button\n            const editBtn = document.createElement('button');\n            editBtn.className = 'client-button';\n            editBtn.textContent = 'Edit';\n            editBtn.style.marginRight = '5px';\n            editBtn.addEventListener('click', () => {\n                this.showEditForm(variable, index);\n            });\n            \n            // Delete button\n            const deleteBtn = document.createElement('button');\n            deleteBtn.className = 'client-button';\n            deleteBtn.textContent = 'Delete';\n            deleteBtn.addEventListener('click', () => {\n                // Remove the variable\n                this.app.settings.Variables.splice(index, 1);\n                \n                // Save settings and reload list\n                this.app.saveSettings();\n                this.loadVariables();\n            });\n            \n            actionCell.appendChild(editBtn);\n            actionCell.appendChild(deleteBtn);\n            row.appendChild(actionCell);\n            \n            this.variablesList.appendChild(row);\n        });\n    }\n    \n    // Show edit form for adding or editing a variable\n    private showEditForm(variable: { name: string, type: string, value: string } | null, index: number): void {\n        if (!this.editFormContainer) return;\n        \n        // Clear previous form content\n        this.editFormContainer.innerHTML = '';\n        \n        // Create the form content\n        const formTitle = document.createElement('h4');\n        formTitle.textContent = index === -1 ? 'Add New Variable' : 'Edit Variable';\n        this.editFormContainer.appendChild(formTitle);\n        \n        // Create name input row\n        const nameRow = document.createElement('div');\n        nameRow.className = 'form-row';\n        \n        const nameLabel = document.createElement('label');\n        nameLabel.textContent = 'Name:';\n        nameLabel.setAttribute('for', 'edit-variable-name');\n        \n        const nameInput = document.createElement('input');\n        nameInput.type = 'text';\n        nameInput.id = 'edit-variable-name';\n        nameInput.value = variable ? variable.name : '';\n        nameInput.placeholder = 'e.g., HP, TARGET, LOCATION';\n        \n        nameRow.appendChild(nameLabel);\n        nameRow.appendChild(nameInput);\n        this.editFormContainer.appendChild(nameRow);\n        \n        // Create type select row\n        const typeRow = document.createElement('div');\n        typeRow.className = 'form-row';\n        \n        const typeLabel = document.createElement('label');\n        typeLabel.textContent = 'Type:';\n        typeLabel.setAttribute('for', 'edit-variable-type');\n        \n        const typeSelect = document.createElement('select');\n        typeSelect.id = 'edit-variable-type';\n        \n        const typeOptions = ['string', 'number', 'boolean'];\n        typeOptions.forEach(option => {\n            const optEl = document.createElement('option');\n            optEl.value = option;\n            optEl.textContent = option.charAt(0).toUpperCase() + option.slice(1);\n            if (variable && variable.type === option) {\n                optEl.selected = true;\n            } else if (!variable && option === 'string') {\n                // Default to string for new variables\n                optEl.selected = true;\n            }\n            typeSelect.appendChild(optEl);\n        });\n        \n        typeRow.appendChild(typeLabel);\n        typeRow.appendChild(typeSelect);\n        this.editFormContainer.appendChild(typeRow);\n        \n        // Create value input row\n        const valueRow = document.createElement('div');\n        valueRow.className = 'form-row';\n        \n        const valueLabel = document.createElement('label');\n        valueLabel.textContent = 'Value:';\n        valueLabel.setAttribute('for', 'edit-variable-value');\n        \n        const valueInput = document.createElement('input');\n        valueInput.type = 'text';\n        valueInput.id = 'edit-variable-value';\n        valueInput.value = variable ? variable.value : '';\n        valueInput.placeholder = 'Enter variable value';\n        \n        valueRow.appendChild(valueLabel);\n        valueRow.appendChild(valueInput);\n        this.editFormContainer.appendChild(valueRow);\n        \n        // Add a hint about variables\n        const hintText = document.createElement('div');\n        hintText.innerHTML = '<small>Tip: Variables can be used in commands with the $VARNAME syntax. For example, \"attack $TARGET\" will be replaced with the value of the TARGET variable.</small>';\n        hintText.style.marginTop = '5px';\n        hintText.style.color = '#999';\n        this.editFormContainer.appendChild(hintText);\n        \n        // Create button row\n        const buttonRow = document.createElement('div');\n        buttonRow.className = 'button-row';\n        buttonRow.style.marginTop = '20px';\n        \n        // Save button\n        const saveBtn = document.createElement('button');\n        saveBtn.className = 'client-button';\n        saveBtn.textContent = 'Save';\n        saveBtn.addEventListener('click', () => {\n            // Validate the variable name (cannot be empty and must be alphanumeric)\n            const name = nameInput.value.trim().toUpperCase();\n            if (!name) {\n                this.app.showNotification('Variable name cannot be empty', false);\n                return;\n            }\n            \n            if (!/^[A-Z0-9_]+$/.test(name)) {\n                this.app.showNotification('Variable name can only contain letters, numbers, and underscores', false);\n                return;\n            }\n            \n            // Check for duplicate names (except when editing the same variable)\n            const duplicateIndex = this.app.settings.Variables.findIndex(v => \n                v.name.toUpperCase() === name && \n                (index === -1 || this.app.settings.Variables.indexOf(v) !== index)\n            );\n            \n            if (duplicateIndex !== -1) {\n                this.app.showNotification(`A variable with the name \"${name}\" already exists`, false);\n                return;\n            }\n            \n            // Format the value based on the type\n            let value = valueInput.value;\n            const type = typeSelect.value;\n            \n            if (type === 'number') {\n                const num = parseFloat(value);\n                if (isNaN(num)) {\n                    this.app.showNotification('Please enter a valid number', false);\n                    return;\n                }\n                value = num.toString();\n            } else if (type === 'boolean') {\n                // Convert various truthy/falsy values to boolean strings\n                value = value.toLowerCase();\n                if (['true', '1', 'yes', 'y', 'on'].includes(value)) {\n                    value = 'true';\n                } else {\n                    value = 'false';\n                }\n            }\n            \n            if (index === -1) {\n                // Adding new variable\n                this.app.settings.Variables.push({\n                    name: name,\n                    type: type,\n                    value: value\n                });\n            } else {\n                // Updating existing variable\n                if (variable) {\n                    variable.name = name;\n                    variable.type = type;\n                    variable.value = value;\n                }\n            }\n            \n            // Save settings and reload\n            this.app.saveSettings();\n            this.loadVariables();\n        });\n        \n        // Cancel button\n        const cancelBtn = document.createElement('button');\n        cancelBtn.className = 'client-button';\n        cancelBtn.textContent = 'Cancel';\n        cancelBtn.style.backgroundColor = '#555';\n        cancelBtn.addEventListener('click', () => {\n            if (this.editFormContainer) {\n                this.editFormContainer.innerHTML = '';\n                this.editFormContainer.classList.remove('active');\n            }\n        });\n        \n        buttonRow.appendChild(saveBtn);\n        buttonRow.appendChild(cancelBtn);\n        this.editFormContainer.appendChild(buttonRow);\n        \n        // Show the form container\n        this.editFormContainer.classList.add('active');\n        \n        // Add type-specific input handling\n        typeSelect.addEventListener('change', () => {\n            const selectedType = typeSelect.value;\n            \n            // Update the input type or appearance based on the selected type\n            if (selectedType === 'boolean') {\n                // For boolean, we could provide a simpler interface\n                valueInput.placeholder = 'Enter true or false';\n                \n                // If the current value isn't already boolean-like, set a default\n                const currentVal = valueInput.value.toLowerCase();\n                if (!['true', 'false', '0', '1', 'yes', 'no', 'y', 'n', 'on', 'off'].includes(currentVal)) {\n                    valueInput.value = 'false';\n                }\n            } else if (selectedType === 'number') {\n                valueInput.placeholder = 'Enter a number';\n                valueInput.type = 'number';\n                \n                // Try to convert current value to number\n                const num = parseFloat(valueInput.value);\n                if (isNaN(num)) {\n                    valueInput.value = '0';\n                }\n            } else {\n                // String type\n                valueInput.placeholder = 'Enter variable value';\n                valueInput.type = 'text';\n            }\n        });\n        \n        // Initialize the input based on current type\n        if (variable && variable.type) {\n            const event = new Event('change');\n            typeSelect.dispatchEvent(event);\n        }\n    }\n    \n    // Update UI elements\n    public updateUI(): void {\n        this.loadVariables();\n    }\n}"],
  "mappings": "AAEO,IAAMA,EAAN,KAAkB,CAMrB,YAAYC,EAAU,CAJtB,KAAQ,cAAoC,KAC5C,KAAQ,kBAAwC,KAChD,KAAQ,eAAqC,KAGzC,KAAK,IAAMA,EACX,KAAK,qBAAqB,EAC1B,KAAK,yBAAyB,CAClC,CAEQ,sBAA6B,CACjC,KAAK,cAAgB,SAAS,eAAe,gBAAgB,EAC7D,KAAK,kBAAoB,SAAS,eAAe,8BAA8B,EAC/E,KAAK,eAAiB,SAAS,eAAe,cAAc,CAChE,CAEQ,0BAAiC,CACjC,KAAK,gBACL,KAAK,eAAe,iBAAiB,QAAS,IAAM,CAChD,KAAK,aAAa,KAAM,EAAE,CAC9B,CAAC,CAET,CAGO,eAAsB,CACrB,CAAC,KAAK,eAAiB,CAAC,KAAK,IAAI,SAAS,YAK9C,KAAK,cAAc,UAAY,GAG3B,KAAK,oBACL,KAAK,kBAAkB,UAAY,GACnC,KAAK,kBAAkB,UAAU,OAAO,QAAQ,GAIpD,KAAK,IAAI,SAAS,UAAU,QAAQ,CAACC,EAAUC,IAAU,CACrD,GAAG,KAAK,gBAAkB,KACtB,OACJ,IAAMC,EAAM,SAAS,cAAc,IAAI,EACvCA,EAAI,QAAQ,MAAQD,EAAM,SAAS,EAEnC,IAAME,EAAW,SAAS,cAAc,IAAI,EAC5CA,EAAS,YAAcH,EAAS,KAChCE,EAAI,YAAYC,CAAQ,EAExB,IAAMC,EAAW,SAAS,cAAc,IAAI,EAC5CA,EAAS,YAAcJ,EAAS,MAAQ,SACxCE,EAAI,YAAYE,CAAQ,EAExB,IAAMC,EAAY,SAAS,cAAc,IAAI,EAC7CA,EAAU,YAAcL,EAAS,MACjCE,EAAI,YAAYG,CAAS,EAEzB,IAAMC,EAAa,SAAS,cAAc,IAAI,EAGxCC,EAAU,SAAS,cAAc,QAAQ,EAC/CA,EAAQ,UAAY,gBACpBA,EAAQ,YAAc,OACtBA,EAAQ,MAAM,YAAc,MAC5BA,EAAQ,iBAAiB,QAAS,IAAM,CACpC,KAAK,aAAaP,EAAUC,CAAK,CACrC,CAAC,EAGD,IAAMO,EAAY,SAAS,cAAc,QAAQ,EACjDA,EAAU,UAAY,gBACtBA,EAAU,YAAc,SACxBA,EAAU,iBAAiB,QAAS,IAAM,CAEtC,KAAK,IAAI,SAAS,UAAU,OAAOP,EAAO,CAAC,EAG3C,KAAK,IAAI,aAAa,EACtB,KAAK,cAAc,CACvB,CAAC,EAEDK,EAAW,YAAYC,CAAO,EAC9BD,EAAW,YAAYE,CAAS,EAChCN,EAAI,YAAYI,CAAU,EAE1B,KAAK,cAAc,YAAYJ,CAAG,CACtC,CAAC,EACL,CAGQ,aAAaF,EAAgEC,EAAqB,CACtG,GAAI,CAAC,KAAK,kBAAmB,OAG7B,KAAK,kBAAkB,UAAY,GAGnC,IAAMQ,EAAY,SAAS,cAAc,IAAI,EAC7CA,EAAU,YAAcR,IAAU,GAAK,mBAAqB,gBAC5D,KAAK,kBAAkB,YAAYQ,CAAS,EAG5C,IAAMC,EAAU,SAAS,cAAc,KAAK,EAC5CA,EAAQ,UAAY,WAEpB,IAAMC,EAAY,SAAS,cAAc,OAAO,EAChDA,EAAU,YAAc,QACxBA,EAAU,aAAa,MAAO,oBAAoB,EAElD,IAAMC,EAAY,SAAS,cAAc,OAAO,EAChDA,EAAU,KAAO,OACjBA,EAAU,GAAK,qBACfA,EAAU,MAAQZ,EAAWA,EAAS,KAAO,GAC7CY,EAAU,YAAc,6BAExBF,EAAQ,YAAYC,CAAS,EAC7BD,EAAQ,YAAYE,CAAS,EAC7B,KAAK,kBAAkB,YAAYF,CAAO,EAG1C,IAAMG,EAAU,SAAS,cAAc,KAAK,EAC5CA,EAAQ,UAAY,WAEpB,IAAMC,EAAY,SAAS,cAAc,OAAO,EAChDA,EAAU,YAAc,QACxBA,EAAU,aAAa,MAAO,oBAAoB,EAElD,IAAMC,EAAa,SAAS,cAAc,QAAQ,EAClDA,EAAW,GAAK,qBAEI,CAAC,SAAU,SAAU,SAAS,EACtC,QAAQC,GAAU,CAC1B,IAAMC,EAAQ,SAAS,cAAc,QAAQ,EAC7CA,EAAM,MAAQD,EACdC,EAAM,YAAcD,EAAO,OAAO,CAAC,EAAE,YAAY,EAAIA,EAAO,MAAM,CAAC,GAC/DhB,GAAYA,EAAS,OAASgB,GAEvB,CAAChB,GAAYgB,IAAW,YAE/BC,EAAM,SAAW,IAErBF,EAAW,YAAYE,CAAK,CAChC,CAAC,EAEDJ,EAAQ,YAAYC,CAAS,EAC7BD,EAAQ,YAAYE,CAAU,EAC9B,KAAK,kBAAkB,YAAYF,CAAO,EAG1C,IAAMK,EAAW,SAAS,cAAc,KAAK,EAC7CA,EAAS,UAAY,WAErB,IAAMC,EAAa,SAAS,cAAc,OAAO,EACjDA,EAAW,YAAc,SACzBA,EAAW,aAAa,MAAO,qBAAqB,EAEpD,IAAMC,EAAa,SAAS,cAAc,OAAO,EACjDA,EAAW,KAAO,OAClBA,EAAW,GAAK,sBAChBA,EAAW,MAAQpB,EAAWA,EAAS,MAAQ,GAC/CoB,EAAW,YAAc,uBAEzBF,EAAS,YAAYC,CAAU,EAC/BD,EAAS,YAAYE,CAAU,EAC/B,KAAK,kBAAkB,YAAYF,CAAQ,EAG3C,IAAMG,EAAW,SAAS,cAAc,KAAK,EAC7CA,EAAS,UAAY,wKACrBA,EAAS,MAAM,UAAY,MAC3BA,EAAS,MAAM,MAAQ,OACvB,KAAK,kBAAkB,YAAYA,CAAQ,EAG3C,IAAMC,EAAY,SAAS,cAAc,KAAK,EAC9CA,EAAU,UAAY,aACtBA,EAAU,MAAM,UAAY,OAG5B,IAAMC,EAAU,SAAS,cAAc,QAAQ,EAC/CA,EAAQ,UAAY,gBACpBA,EAAQ,YAAc,OACtBA,EAAQ,iBAAiB,QAAS,IAAM,CAEpC,IAAMC,EAAOZ,EAAU,MAAM,KAAK,EAAE,YAAY,EAChD,GAAI,CAACY,EAAM,CACP,KAAK,IAAI,iBAAiB,gCAAiC,EAAK,EAChE,MACJ,CAEA,GAAI,CAAC,eAAe,KAAKA,CAAI,EAAG,CAC5B,KAAK,IAAI,iBAAiB,mEAAoE,EAAK,EACnG,MACJ,CAQA,GALuB,KAAK,IAAI,SAAS,UAAU,UAAU,GACzD,EAAE,KAAK,YAAY,IAAMA,IACxBvB,IAAU,IAAM,KAAK,IAAI,SAAS,UAAU,QAAQ,CAAC,IAAMA,EAChE,IAEuB,GAAI,CACvB,KAAK,IAAI,iBAAiB,6BAA6BuB,CAAI,mBAAoB,EAAK,EACpF,MACJ,CAGA,IAAIC,EAAQL,EAAW,MACjBM,EAAOX,EAAW,MAExB,GAAIW,IAAS,SAAU,CACnB,IAAMC,EAAM,WAAWF,CAAK,EAC5B,GAAI,MAAME,CAAG,EAAG,CACZ,KAAK,IAAI,iBAAiB,8BAA+B,EAAK,EAC9D,MACJ,CACAF,EAAQE,EAAI,SAAS,CACzB,MAAWD,IAAS,YAEhBD,EAAQA,EAAM,YAAY,EACtB,CAAC,OAAQ,IAAK,MAAO,IAAK,IAAI,EAAE,SAASA,CAAK,EAC9CA,EAAQ,OAERA,EAAQ,SAIZxB,IAAU,GAEV,KAAK,IAAI,SAAS,UAAU,KAAK,CAC7B,KAAMuB,EACN,KAAME,EACN,MAAOD,CACX,CAAC,EAGGzB,IACAA,EAAS,KAAOwB,EAChBxB,EAAS,KAAO0B,EAChB1B,EAAS,MAAQyB,GAKzB,KAAK,IAAI,aAAa,EACtB,KAAK,cAAc,CACvB,CAAC,EAGD,IAAMG,EAAY,SAAS,cAAc,QAAQ,EAiDjD,GAhDAA,EAAU,UAAY,gBACtBA,EAAU,YAAc,SACxBA,EAAU,MAAM,gBAAkB,OAClCA,EAAU,iBAAiB,QAAS,IAAM,CAClC,KAAK,oBACL,KAAK,kBAAkB,UAAY,GACnC,KAAK,kBAAkB,UAAU,OAAO,QAAQ,EAExD,CAAC,EAEDN,EAAU,YAAYC,CAAO,EAC7BD,EAAU,YAAYM,CAAS,EAC/B,KAAK,kBAAkB,YAAYN,CAAS,EAG5C,KAAK,kBAAkB,UAAU,IAAI,QAAQ,EAG7CP,EAAW,iBAAiB,SAAU,IAAM,CACxC,IAAMc,EAAed,EAAW,MAGhC,GAAIc,IAAiB,UAAW,CAE5BT,EAAW,YAAc,sBAGzB,IAAMU,EAAaV,EAAW,MAAM,YAAY,EAC3C,CAAC,OAAQ,QAAS,IAAK,IAAK,MAAO,KAAM,IAAK,IAAK,KAAM,KAAK,EAAE,SAASU,CAAU,IACpFV,EAAW,MAAQ,QAE3B,SAAWS,IAAiB,SAAU,CAClCT,EAAW,YAAc,iBACzBA,EAAW,KAAO,SAGlB,IAAMO,EAAM,WAAWP,EAAW,KAAK,EACnC,MAAMO,CAAG,IACTP,EAAW,MAAQ,IAE3B,MAEIA,EAAW,YAAc,uBACzBA,EAAW,KAAO,MAE1B,CAAC,EAGGpB,GAAYA,EAAS,KAAM,CAC3B,IAAM+B,EAAQ,IAAI,MAAM,QAAQ,EAChChB,EAAW,cAAcgB,CAAK,CAClC,CACJ,CAGO,UAAiB,CACpB,KAAK,cAAc,CACvB,CACJ",
  "names": ["VariablesUI", "app", "variable", "index", "row", "nameCell", "typeCell", "valueCell", "actionCell", "editBtn", "deleteBtn", "formTitle", "nameRow", "nameLabel", "nameInput", "typeRow", "typeLabel", "typeSelect", "option", "optEl", "valueRow", "valueLabel", "valueInput", "hintText", "buttonRow", "saveBtn", "name", "value", "type", "num", "cancelBtn", "selectedType", "currentVal", "event"]
}
